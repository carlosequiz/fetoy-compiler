
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 02 20:20:06 VET 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Hashtable;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 02 20:20:06 VET 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\266\000\002\002\004\000\002\076\002\000\002\077" +
    "\002\000\002\004\013\000\002\030\012\000\002\030\002" +
    "\000\002\053\003\000\002\053\002\000\002\026\005\000" +
    "\002\026\006\000\002\026\003\000\002\026\004\000\002" +
    "\021\005\000\002\021\002\000\002\100\002\000\002\022" +
    "\013\000\002\022\002\000\002\024\003\000\002\024\003" +
    "\000\002\023\003\000\002\023\002\000\002\025\006\000" +
    "\002\025\007\000\002\025\004\000\002\025\005\000\002" +
    "\101\002\000\002\027\006\000\002\102\002\000\002\017" +
    "\006\000\002\103\002\000\002\020\006\000\002\037\005" +
    "\000\002\005\004\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\010\003\000\002\010\003\000\002\012\006\000\002\012" +
    "\003\000\002\012\005\000\002\054\005\000\002\064\006" +
    "\000\002\064\004\000\002\064\004\000\002\055\006\000" +
    "\002\055\004\000\002\062\010\000\002\063\010\000\002" +
    "\063\007\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\007\005" +
    "\000\002\007\004\000\002\046\005\000\002\046\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\071\003\000" +
    "\002\075\003\000\002\074\003\000\002\073\006\000\002" +
    "\072\003\000\002\065\006\000\002\061\005\000\002\051" +
    "\006\000\002\052\005\000\002\052\005\000\002\052\003" +
    "\000\002\052\003\000\002\052\002\000\002\044\011\000" +
    "\002\067\011\000\002\070\007\000\002\070\006\000\002" +
    "\045\007\000\002\045\006\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\104\002\000\002\034\006" +
    "\000\002\105\002\000\002\035\014\000\002\106\002\000" +
    "\002\107\002\000\002\036\013\000\002\042\004\000\002" +
    "\110\002\000\002\042\007\000\002\042\002\000\002\043" +
    "\005\000\002\043\005\000\002\043\004\000\002\043\005" +
    "\000\002\043\005\000\002\043\004\000\002\043\002\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\005\000\002\041\004\000\002\111\002\000" +
    "\002\066\007\000\002\112\002\000\002\031\007\000\002" +
    "\032\006\000\002\032\004\000\002\032\002\000\002\015" +
    "\005\000\002\015\005\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\004\000\002\002\003\000\002" +
    "\002\005\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\005" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\060\006\000\002\060\006\000\002\057\005\000\002\057" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\003" +
    "\000\002\050\003\000\002\003\003\000\002\003\003\000" +
    "\002\016\004\000\002\016\005\000\002\016\005\000\002" +
    "\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\006\034\ufffc\051\ufffc\001\002\000\004\002" +
    "\u015e\001\002\000\006\034\006\051\007\001\002\000\022" +
    "\016\000\017\000\020\000\021\000\022\000\026\000\051" +
    "\000\077\000\001\002\000\022\016\013\017\024\020\023" +
    "\021\012\022\011\026\022\052\014\077\015\001\002\000" +
    "\012\015\uffd8\025\uffd8\027\uffd8\075\uffd8\001\002\000\012" +
    "\015\uffca\025\uffca\027\uffca\075\uffca\001\002\000\012\015" +
    "\uffcc\025\uffcc\027\uffcc\075\uffcc\001\002\000\012\015\uffcd" +
    "\025\uffcd\027\uffcd\075\uffcd\001\002\000\004\015\uffef\001" +
    "\002\000\004\034\177\001\002\000\012\015\uffda\025\uffda" +
    "\027\uffda\075\uffda\001\002\000\012\015\uffdb\025\uffdb\027" +
    "\uffdb\075\uffdb\001\002\000\006\015\ufff0\075\035\001\002" +
    "\000\004\015\027\001\002\000\004\015\025\001\002\000" +
    "\012\015\uffc9\025\uffc9\027\uffc9\075\uffc9\001\002\000\012" +
    "\015\uffcb\025\uffcb\027\uffcb\075\uffcb\001\002\000\004\027" +
    "\026\001\002\000\012\015\uffd7\025\uffd7\027\uffd7\075\uffd7" +
    "\001\002\000\004\026\030\001\002\000\024\016\013\017" +
    "\024\020\023\021\012\022\011\026\022\027\ufffa\053\033" +
    "\077\015\001\002\000\004\027\175\001\002\000\006\025" +
    "\171\027\ufffb\001\002\000\020\016\013\017\024\020\023" +
    "\021\012\022\011\026\022\077\015\001\002\000\010\025" +
    "\ufff7\027\ufff7\075\035\001\002\000\040\005\060\013\066" +
    "\014\047\015\052\026\040\031\036\032\046\033\061\050" +
    "\043\075\042\104\067\105\057\106\053\107\041\110\044" +
    "\001\002\000\056\004\uff63\005\uff63\006\uff63\007\uff63\010" +
    "\uff63\011\uff63\023\uff63\025\uff63\027\uff63\034\uff63\036\uff63" +
    "\037\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045" +
    "\uff63\046\uff63\047\uff63\073\uff63\076\uff63\001\002\000\044" +
    "\004\077\005\071\006\106\007\073\010\075\011\102\036" +
    "\103\037\074\040\104\041\110\042\100\043\105\044\072" +
    "\045\101\046\076\047\107\076\167\001\002\000\040\005" +
    "\060\013\066\014\047\015\052\026\040\031\036\032\046" +
    "\033\061\050\043\075\042\104\067\105\057\106\053\107" +
    "\041\110\044\001\002\000\004\026\162\001\002\000\042" +
    "\005\060\013\066\014\047\015\052\026\040\030\155\031" +
    "\036\032\046\033\061\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\040\005\uff50\013" +
    "\uff50\014\uff50\015\uff50\026\uff50\031\uff50\032\uff50\033\uff50" +
    "\050\uff50\075\uff50\104\uff50\105\uff50\106\uff50\107\uff50\110" +
    "\uff50\001\002\000\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\023\uffb7\025\uffb7\027\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\073\uffb7\076\uffb7\001\002\000" +
    "\056\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a" +
    "\023\uff5a\025\uff5a\027\uff5a\034\uff5a\036\uff5a\037\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\073\uff5a\076\uff5a\001\002\000\056\004\uff62\005" +
    "\uff62\006\uff62\007\uff62\010\uff62\011\uff62\023\uff62\025\uff62" +
    "\027\uff62\034\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\073\uff62" +
    "\076\uff62\001\002\000\056\004\uff64\005\uff64\006\uff64\007" +
    "\uff64\010\uff64\011\uff64\023\uff64\025\uff64\027\uff64\034\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\047\uff64\073\uff64\076\uff64\001\002" +
    "\000\056\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011" +
    "\uff5e\023\uff5e\025\uff5e\027\uff5e\034\uff5e\036\uff5e\037\uff5e" +
    "\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046" +
    "\uff5e\047\uff5e\073\uff5e\076\uff5e\001\002\000\056\004\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\023\uff5d\025" +
    "\uff5d\027\uff5d\034\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d" +
    "\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d\073" +
    "\uff5d\076\uff5d\001\002\000\076\004\uff7b\005\uff7b\006\uff7b" +
    "\007\uff7b\010\uff7b\011\uff7b\023\uff7b\024\uff7b\025\uff7b\026" +
    "\140\027\uff7b\034\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b" +
    "\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\063" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\073\uff7b\075\137\076\uff7b" +
    "\102\136\001\002\000\056\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\023\uffb4\025\uffb4\027\uffb4\034\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\073\uffb4\076\uffb4\001\002" +
    "\000\072\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\027\uff7a\034\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a" +
    "\073\uff7a\075\133\076\uff7a\001\002\000\056\004\uff5f\005" +
    "\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\023\uff5f\025\uff5f" +
    "\027\uff5f\034\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\073\uff5f" +
    "\076\uff5f\001\002\000\072\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\011\uff79\023\uff79\024\uff79\025\uff79\027\uff79" +
    "\034\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043" +
    "\uff79\044\uff79\045\uff79\046\uff79\047\uff79\063\uff79\064\uff79" +
    "\065\uff79\066\uff79\073\uff79\076\uff79\102\131\001\002\000" +
    "\056\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\023\uffb6\025\uffb6\027\uffb6\034\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\073\uffb6\076\uffb6\001\002\000\040\005\uff51\013" +
    "\uff51\014\uff51\015\uff51\026\uff51\031\uff51\032\uff51\033\uff51" +
    "\050\uff51\075\uff51\104\uff51\105\uff51\106\uff51\107\uff51\110" +
    "\uff51\001\002\000\056\004\uff61\005\uff61\006\uff61\007\uff61" +
    "\010\uff61\011\uff61\023\uff61\025\uff61\027\uff61\034\uff61\036" +
    "\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61" +
    "\045\uff61\046\uff61\047\uff61\073\uff61\076\uff61\001\002\000" +
    "\056\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c" +
    "\023\uff5c\025\uff5c\027\uff5c\034\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c" +
    "\047\uff5c\073\uff5c\076\uff5c\001\002\000\040\005\060\013" +
    "\066\014\047\015\052\026\040\031\036\032\046\033\061" +
    "\050\043\075\042\104\067\105\057\106\053\107\041\110" +
    "\044\001\002\000\056\004\uff5b\005\uff5b\006\uff5b\007\uff5b" +
    "\010\uff5b\011\uff5b\023\uff5b\025\uff5b\027\uff5b\034\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b" +
    "\045\uff5b\046\uff5b\047\uff5b\073\uff5b\076\uff5b\001\002\000" +
    "\056\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67" +
    "\023\uff67\025\uff67\027\uff67\034\uff67\036\uff67\037\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67" +
    "\047\uff67\073\uff67\076\uff67\001\002\000\056\004\uff65\005" +
    "\uff65\006\uff65\007\uff65\010\uff65\011\uff65\023\uff65\025\uff65" +
    "\027\uff65\034\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042" +
    "\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\073\uff65" +
    "\076\uff65\001\002\000\056\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\023\uffb8\025\uffb8\027\uffb8\034\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\073\uffb8\076\uffb8\001\002" +
    "\000\056\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011" +
    "\uff68\023\uff68\025\uff68\027\uff68\034\uff68\036\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\073\uff68\076\uff68\001\002\000\040\005\060" +
    "\013\066\014\047\015\052\026\040\031\036\032\046\033" +
    "\061\050\043\075\042\104\067\105\057\106\053\107\041" +
    "\110\044\001\002\000\040\005\060\013\066\014\047\015" +
    "\052\026\040\031\036\032\046\033\061\050\043\075\042" +
    "\104\067\105\057\106\053\107\041\110\044\001\002\000" +
    "\040\005\060\013\066\014\047\015\052\026\040\031\036" +
    "\032\046\033\061\050\043\075\042\104\067\105\057\106" +
    "\053\107\041\110\044\001\002\000\040\005\060\013\066" +
    "\014\047\015\052\026\040\031\036\032\046\033\061\050" +
    "\043\075\042\104\067\105\057\106\053\107\041\110\044" +
    "\001\002\000\040\005\060\013\066\014\047\015\052\026" +
    "\040\031\036\032\046\033\061\050\043\075\042\104\067" +
    "\105\057\106\053\107\041\110\044\001\002\000\040\005" +
    "\060\013\066\014\047\015\052\026\040\031\036\032\046" +
    "\033\061\050\043\075\042\104\067\105\057\106\053\107" +
    "\041\110\044\001\002\000\040\005\060\013\066\014\047" +
    "\015\052\026\040\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\040\005\060\013\066\014\047\015\052\026\040\031" +
    "\036\032\046\033\061\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\040\005\060\013" +
    "\066\014\047\015\052\026\040\031\036\032\046\033\061" +
    "\050\043\075\042\104\067\105\057\106\053\107\041\110" +
    "\044\001\002\000\040\005\060\013\066\014\047\015\052" +
    "\026\040\031\036\032\046\033\061\050\043\075\042\104" +
    "\067\105\057\106\053\107\041\110\044\001\002\000\040" +
    "\005\060\013\066\014\047\015\052\026\040\031\036\032" +
    "\046\033\061\050\043\075\042\104\067\105\057\106\053" +
    "\107\041\110\044\001\002\000\040\005\060\013\066\014" +
    "\047\015\052\026\040\031\036\032\046\033\061\050\043" +
    "\075\042\104\067\105\057\106\053\107\041\110\044\001" +
    "\002\000\040\005\060\013\066\014\047\015\052\026\040" +
    "\031\036\032\046\033\061\050\043\075\042\104\067\105" +
    "\057\106\053\107\041\110\044\001\002\000\040\005\060" +
    "\013\066\014\047\015\052\026\040\031\036\032\046\033" +
    "\061\050\043\075\042\104\067\105\057\106\053\107\041" +
    "\110\044\001\002\000\040\005\060\013\066\014\047\015" +
    "\052\026\040\031\036\032\046\033\061\050\043\075\042" +
    "\104\067\105\057\106\053\107\041\110\044\001\002\000" +
    "\040\005\060\013\066\014\047\015\052\026\040\031\036" +
    "\032\046\033\061\050\043\075\042\104\067\105\057\106" +
    "\053\107\041\110\044\001\002\000\056\004\077\005\071" +
    "\006\106\007\073\010\075\011\102\023\uff6d\025\uff6d\027" +
    "\uff6d\034\uff6d\036\103\037\074\040\uff6d\041\uff6d\042\100" +
    "\043\105\044\072\045\101\046\076\047\107\073\uff6d\076" +
    "\uff6d\001\002\000\056\004\077\005\071\006\106\007\073" +
    "\010\075\011\102\023\uff6b\025\uff6b\027\uff6b\034\uff6b\036" +
    "\103\037\074\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b" +
    "\045\uff6b\046\uff6b\047\uff6b\073\uff6b\076\uff6b\001\002\000" +
    "\056\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77" +
    "\023\uff77\025\uff77\027\uff77\034\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\073\uff77\076\uff77\001\002\000\056\004\077\005" +
    "\071\006\106\007\073\010\075\011\102\023\uff6f\025\uff6f" +
    "\027\uff6f\034\uff6f\036\103\037\074\040\uff6f\041\uff6f\042" +
    "\100\043\105\044\072\045\101\046\076\047\107\073\uff6f" +
    "\076\uff6f\001\002\000\056\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\023\uff6e\025\uff6e\027\uff6e\034\uff6e" +
    "\036\103\037\074\040\uff6e\041\uff6e\042\100\043\105\044" +
    "\072\045\101\046\076\047\107\073\uff6e\076\uff6e\001\002" +
    "\000\056\004\077\005\071\006\106\007\073\010\075\011" +
    "\102\023\uff72\025\uff72\027\uff72\034\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\073\uff72\076\uff72\001\002\000\056\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\023\uff73\025" +
    "\uff73\027\uff73\034\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\073" +
    "\uff73\076\uff73\001\002\000\056\004\077\005\071\006\106" +
    "\007\073\010\075\011\102\023\uff69\025\uff69\027\uff69\034" +
    "\uff69\036\103\037\074\040\uff69\041\uff69\042\uff69\043\uff69" +
    "\044\uff69\045\uff69\046\uff69\047\uff69\073\uff69\076\uff69\001" +
    "\002\000\056\004\077\005\071\006\106\007\073\010\075" +
    "\011\102\023\uff70\025\uff70\027\uff70\034\uff70\036\103\037" +
    "\074\040\uff70\041\uff70\042\100\043\105\044\072\045\101" +
    "\046\076\047\107\073\uff70\076\uff70\001\002\000\056\004" +
    "\uff78\005\uff78\006\106\007\073\010\075\011\102\023\uff78" +
    "\025\uff78\027\uff78\034\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78" +
    "\073\uff78\076\uff78\001\002\000\056\004\077\005\071\006" +
    "\106\007\073\010\075\011\102\023\uff6c\025\uff6c\027\uff6c" +
    "\034\uff6c\036\103\037\074\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\073\uff6c\076\uff6c" +
    "\001\002\000\056\004\uff74\005\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\023\uff74\025\uff74\027\uff74\034\uff74\036\uff74" +
    "\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045" +
    "\uff74\046\uff74\047\uff74\073\uff74\076\uff74\001\002\000\056" +
    "\004\077\005\071\006\106\007\073\010\075\011\102\023" +
    "\uff71\025\uff71\027\uff71\034\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047" +
    "\uff71\073\uff71\076\uff71\001\002\000\056\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\023\uff75\025\uff75\027" +
    "\uff75\034\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\073\uff75\076" +
    "\uff75\001\002\000\056\004\077\005\071\006\106\007\073" +
    "\010\075\011\102\023\uff6a\025\uff6a\027\uff6a\034\uff6a\036" +
    "\103\037\074\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a" +
    "\045\uff6a\046\uff6a\047\uff6a\073\uff6a\076\uff6a\001\002\000" +
    "\056\004\uff76\005\uff76\006\106\007\073\010\075\011\102" +
    "\023\uff76\025\uff76\027\uff76\034\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\073\uff76\076\uff76\001\002\000\004\015\132\001" +
    "\002\000\072\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57" +
    "\011\uff57\023\uff57\024\uff57\025\uff57\027\uff57\034\uff57\036" +
    "\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57" +
    "\045\uff57\046\uff57\047\uff57\063\uff57\064\uff57\065\uff57\066" +
    "\uff57\073\uff57\076\uff57\102\uff57\001\002\000\040\005\060" +
    "\013\066\014\047\015\052\026\040\031\036\032\046\033" +
    "\061\050\043\075\042\104\067\105\057\106\053\107\041" +
    "\110\044\001\002\000\044\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\036\103\037\074\040\104\041\110" +
    "\042\100\043\105\044\072\045\101\046\076\047\107\076" +
    "\135\001\002\000\072\004\uff59\005\uff59\006\uff59\007\uff59" +
    "\010\uff59\011\uff59\023\uff59\024\uff59\025\uff59\027\uff59\034" +
    "\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59" +
    "\044\uff59\045\uff59\046\uff59\047\uff59\063\uff59\064\uff59\065" +
    "\uff59\066\uff59\073\uff59\075\uff59\076\uff59\001\002\000\004" +
    "\015\152\001\002\000\040\005\060\013\066\014\047\015" +
    "\052\026\040\031\036\032\046\033\061\050\043\075\042" +
    "\104\067\105\057\106\053\107\041\110\044\001\002\000" +
    "\046\005\060\013\066\014\047\015\052\025\uffac\026\040" +
    "\027\uffac\030\143\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\046\004\077\005\071\006\106\007\073\010\075\011" +
    "\102\025\uffae\027\uffae\036\103\037\074\040\104\041\110" +
    "\042\100\043\105\044\072\045\101\046\076\047\107\001" +
    "\002\000\006\025\144\027\145\001\002\000\006\025\uffad" +
    "\027\uffad\001\002\000\042\005\060\013\066\014\047\015" +
    "\052\026\040\030\147\031\036\032\046\033\061\050\043" +
    "\075\042\104\067\105\057\106\053\107\041\110\044\001" +
    "\002\000\056\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\023\uffb1\025\uffb1\027\uffb1\034\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\073\uffb1\076\uffb1\001\002\000\046\004" +
    "\077\005\071\006\106\007\073\010\075\011\102\025\uffb0" +
    "\027\uffb0\036\103\037\074\040\104\041\110\042\100\043" +
    "\105\044\072\045\101\046\076\047\107\001\002\000\006" +
    "\025\uffaf\027\uffaf\001\002\000\044\004\077\005\071\006" +
    "\106\007\073\010\075\011\102\036\103\037\074\040\104" +
    "\041\110\042\100\043\105\044\072\045\101\046\076\047" +
    "\107\076\151\001\002\000\072\004\uff58\005\uff58\006\uff58" +
    "\007\uff58\010\uff58\011\uff58\023\uff58\024\uff58\025\uff58\027" +
    "\uff58\034\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\063\uff58\064" +
    "\uff58\065\uff58\066\uff58\073\uff58\075\uff58\076\uff58\001\002" +
    "\000\072\004\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011" +
    "\uff56\023\uff56\024\uff56\025\uff56\027\uff56\034\uff56\036\uff56" +
    "\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044\uff56\045" +
    "\uff56\046\uff56\047\uff56\063\uff56\064\uff56\065\uff56\066\uff56" +
    "\073\uff56\076\uff56\102\uff56\001\002\000\046\004\077\005" +
    "\071\006\106\007\073\010\075\011\102\025\uff53\036\103" +
    "\037\074\040\104\041\110\042\100\043\105\044\072\045" +
    "\101\046\076\047\107\076\uff53\001\002\000\006\025\156" +
    "\076\157\001\002\000\006\025\uff52\076\uff52\001\002\000" +
    "\042\005\060\013\066\014\047\015\052\026\040\030\161" +
    "\031\036\032\046\033\061\050\043\075\042\104\067\105" +
    "\057\106\053\107\041\110\044\001\002\000\056\004\uff60" +
    "\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60\023\uff60\025" +
    "\uff60\027\uff60\034\uff60\036\uff60\037\uff60\040\uff60\041\uff60" +
    "\042\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\073" +
    "\uff60\076\uff60\001\002\000\046\004\077\005\071\006\106" +
    "\007\073\010\075\011\102\025\uff55\036\103\037\074\040" +
    "\104\041\110\042\100\043\105\044\072\045\101\046\076" +
    "\047\107\076\uff55\001\002\000\006\025\uff54\076\uff54\001" +
    "\002\000\040\005\060\013\066\014\047\015\052\026\040" +
    "\031\036\032\046\033\061\050\043\075\042\104\067\105" +
    "\057\106\053\107\041\110\044\001\002\000\044\004\077" +
    "\005\071\006\106\007\073\010\075\011\102\027\164\036" +
    "\103\037\074\040\104\041\110\042\100\043\105\044\072" +
    "\045\101\046\076\047\107\001\002\000\056\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\023\uffb5\025\uffb5" +
    "\027\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\073\uffb5" +
    "\076\uffb5\001\002\000\044\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\027\166\036\103\037\074\040\104" +
    "\041\110\042\100\043\105\044\072\045\101\046\076\047" +
    "\107\001\002\000\056\004\uff66\005\uff66\006\uff66\007\uff66" +
    "\010\uff66\011\uff66\023\uff66\025\uff66\027\uff66\034\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\047\uff66\073\uff66\076\uff66\001\002\000" +
    "\012\015\uffd9\025\uffd9\027\uffd9\075\uffd9\001\002\000\010" +
    "\025\ufff6\027\ufff6\075\035\001\002\000\022\016\013\017" +
    "\024\020\023\021\012\022\011\026\022\053\172\077\015" +
    "\001\002\000\020\016\013\017\024\020\023\021\012\022" +
    "\011\026\022\077\015\001\002\000\010\025\ufff9\027\ufff9" +
    "\075\035\001\002\000\010\025\ufff8\027\ufff8\075\035\001" +
    "\002\000\004\023\176\001\002\000\006\034\ufffd\051\ufffd" +
    "\001\002\000\022\016\013\017\024\020\023\021\012\022" +
    "\011\026\022\077\015\100\201\001\002\000\006\025\231" +
    "\035\232\001\002\000\020\016\013\017\024\020\023\021" +
    "\012\022\011\026\022\077\015\001\002\000\004\035\206" +
    "\001\002\000\006\015\205\075\035\001\002\000\012\015" +
    "\uffd6\025\uffd6\027\uffd6\075\uffd6\001\002\000\006\025\uffd1" +
    "\035\uffd1\001\002\000\012\015\uffd3\025\uffd3\027\uffd3\075" +
    "\uffd3\001\002\000\006\015\210\075\035\001\002\000\004" +
    "\034\211\001\002\000\040\005\060\013\066\014\047\015" +
    "\052\026\040\031\036\032\046\033\061\050\043\075\042" +
    "\104\067\105\057\106\053\107\041\110\044\001\002\000" +
    "\044\004\077\005\071\006\106\007\073\010\075\011\102" +
    "\036\103\037\074\040\104\041\110\042\100\043\105\044" +
    "\072\045\101\046\076\047\107\073\225\001\002\000\042" +
    "\005\060\013\066\014\047\015\052\026\040\031\036\032" +
    "\046\033\061\035\215\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\044\004\077\005" +
    "\071\006\106\007\073\010\075\011\102\036\103\037\074" +
    "\040\104\041\110\042\100\043\105\044\072\045\101\046" +
    "\076\047\107\073\216\001\002\000\004\035\uffd0\001\002" +
    "\000\004\034\217\001\002\000\020\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\077\015\001\002\000\006" +
    "\025\221\035\222\001\002\000\020\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\077\015\001\002\000\042" +
    "\005\uffcf\013\uffcf\014\uffcf\015\uffcf\026\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\035\uffcf\050\uffcf\075\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\110\uffcf\001\002\000\006\015\224\075" +
    "\035\001\002\000\006\025\uffd2\035\uffd2\001\002\000\004" +
    "\034\226\001\002\000\020\016\013\017\024\020\023\021" +
    "\012\022\011\026\022\077\015\001\002\000\006\025\221" +
    "\035\230\001\002\000\042\005\uffce\013\uffce\014\uffce\015" +
    "\uffce\026\uffce\031\uffce\032\uffce\033\uffce\035\uffce\050\uffce" +
    "\075\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\001" +
    "\002\000\022\016\013\017\024\020\023\021\012\022\011" +
    "\026\022\077\015\100\201\001\002\000\012\015\uffd4\025" +
    "\uffd4\027\uffd4\075\uffd4\001\002\000\004\035\234\001\002" +
    "\000\012\015\uffd5\025\uffd5\027\uffd5\075\uffd5\001\002\000" +
    "\022\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\026\ufff4" +
    "\051\ufff4\077\ufff4\001\002\000\022\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\051\uffff\077\015\001\002" +
    "\000\004\023\u015d\001\002\000\004\051\ufff1\001\002\000" +
    "\006\015\243\075\035\001\002\000\006\023\uffe1\025\250" +
    "\001\002\000\010\023\uffde\024\245\025\uffde\001\002\000" +
    "\006\023\uffdf\025\uffdf\001\002\000\042\005\060\013\066" +
    "\014\047\015\052\026\040\030\247\031\036\032\046\033" +
    "\061\050\043\075\042\104\067\105\057\106\053\107\041" +
    "\110\044\001\002\000\046\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\023\uffdd\025\uffdd\036\103\037\074" +
    "\040\104\041\110\042\100\043\105\044\072\045\101\046" +
    "\076\047\107\001\002\000\006\023\uffdc\025\uffdc\001\002" +
    "\000\004\015\243\001\002\000\006\023\uffe0\025\uffe0\001" +
    "\002\000\004\051\253\001\002\000\024\016\013\017\024" +
    "\020\023\021\012\022\011\026\022\052\014\054\u015a\077" +
    "\015\001\002\000\006\035\ufff1\051\ufff1\001\002\000\006" +
    "\035\257\051\256\001\002\000\022\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\052\014\077\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\015\261\001\002\000" +
    "\004\026\ufff3\001\002\000\004\026\263\001\002\000\024" +
    "\016\013\017\024\020\023\021\012\022\011\026\022\027" +
    "\uffed\053\266\077\015\001\002\000\004\027\301\001\002" +
    "\000\006\025\273\027\uffee\001\002\000\020\016\013\017" +
    "\024\020\023\021\012\022\011\026\022\077\015\001\002" +
    "\000\006\015\270\075\035\001\002\000\006\025\uffea\027" +
    "\uffea\001\002\000\006\015\272\075\035\001\002\000\006" +
    "\025\uffe9\027\uffe9\001\002\000\022\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\053\274\077\015\001\002" +
    "\000\020\016\013\017\024\020\023\021\012\022\011\026" +
    "\022\077\015\001\002\000\006\015\276\075\035\001\002" +
    "\000\006\025\uffec\027\uffec\001\002\000\006\015\300\075" +
    "\035\001\002\000\006\025\uffeb\027\uffeb\001\002\000\004" +
    "\034\302\001\002\000\042\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\026\uffe4\055\uffe4\060\uffe4\062\uffe4" +
    "\067\uffe4\071\uffe4\074\uffe4\077\uffe4\101\uffe4\103\uffe4\001" +
    "\002\000\006\035\ufff2\051\ufff2\001\002\000\042\015\052" +
    "\016\013\017\024\020\023\021\012\022\011\026\022\055" +
    "\315\060\327\062\313\067\326\071\314\074\317\077\015" +
    "\101\321\103\333\001\002\000\004\023\uffa3\001\002\000" +
    "\004\023\uffc1\001\002\000\004\023\uffa4\001\002\000\004" +
    "\023\uffbf\001\002\000\004\023\uffa5\001\002\000\004\023" +
    "\uffba\001\002\000\004\026\u0141\001\002\000\004\026\u0133" +
    "\001\002\000\040\005\060\013\066\014\047\015\052\026" +
    "\040\031\036\032\046\033\061\050\043\075\042\104\067" +
    "\105\057\106\053\107\041\110\044\001\002\000\014\024" +
    "\u0127\063\u0128\064\u0129\065\u0126\066\u012a\001\002\000\042" +
    "\005\060\013\066\014\047\015\052\020\u0125\026\040\031" +
    "\036\032\046\033\061\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\004\023\uffc0\001" +
    "\002\000\020\016\013\017\024\020\023\021\012\022\011" +
    "\026\022\077\015\001\002\000\044\015\052\016\013\017" +
    "\024\020\023\021\012\022\011\026\022\035\u011f\055\315" +
    "\060\327\062\313\067\326\071\314\074\317\077\015\101" +
    "\321\103\333\001\002\000\004\023\u011e\001\002\000\004" +
    "\023\uffbe\001\002\000\004\023\uffbb\001\002\000\004\026" +
    "\uff9e\001\002\000\040\005\060\013\066\014\047\015\052" +
    "\026\040\031\036\032\046\033\061\050\043\075\042\104" +
    "\067\105\057\106\053\107\041\110\044\001\002\000\004" +
    "\023\uffbc\001\002\000\004\023\uffb9\001\002\000\004\023" +
    "\uffbd\001\002\000\004\026\335\001\002\000\004\023\uffc2" +
    "\001\002\000\040\005\060\013\066\014\047\015\052\026" +
    "\040\031\036\032\046\033\061\050\043\075\042\104\067" +
    "\105\057\106\053\107\041\110\044\001\002\000\044\004" +
    "\077\005\071\006\106\007\073\010\075\011\102\027\337" +
    "\036\103\037\074\040\104\041\110\042\100\043\105\044" +
    "\072\045\101\046\076\047\107\001\002\000\004\023\uffb3" +
    "\001\002\000\044\004\077\005\071\006\106\007\073\010" +
    "\075\011\102\034\uffa2\036\103\037\074\040\104\041\110" +
    "\042\100\043\105\044\072\045\101\046\076\047\107\001" +
    "\002\000\004\034\342\001\002\000\042\015\052\016\013" +
    "\017\024\020\023\021\012\022\011\026\022\055\352\060" +
    "\327\061\355\062\313\067\326\071\350\077\015\101\321" +
    "\103\333\001\002\000\004\023\uffa1\001\002\000\004\023" +
    "\uff90\001\002\000\004\023\uff8e\001\002\000\004\023\uff8b" +
    "\001\002\000\004\023\uff89\001\002\000\004\026\u0108\001" +
    "\002\000\004\023\u0107\001\002\000\040\005\060\013\066" +
    "\014\047\015\052\026\040\031\036\032\046\033\061\050" +
    "\043\075\042\104\067\105\057\106\053\107\041\110\044" +
    "\001\002\000\004\023\uff8f\001\002\000\004\023\uff8d\001" +
    "\002\000\004\023\uff87\001\002\000\004\023\uff8a\001\002" +
    "\000\004\023\uff88\001\002\000\004\023\uff8c\001\002\000" +
    "\044\015\052\016\013\017\024\020\023\021\012\022\011" +
    "\026\022\035\363\055\352\060\327\061\355\062\313\067" +
    "\326\071\350\077\015\101\321\103\333\001\002\000\004" +
    "\023\364\001\002\000\014\023\uffe2\035\uffe2\056\uffe2\057" +
    "\uffe2\072\uffe2\001\002\000\044\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\026\uff86\035\uff86\055\uff86\060" +
    "\uff86\061\uff86\062\uff86\067\uff86\071\uff86\077\uff86\101\uff86" +
    "\103\uff86\001\002\000\044\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\034\uff84\036\103\037\074\040\104" +
    "\041\110\042\100\043\105\044\072\045\101\046\076\047" +
    "\107\001\002\000\004\034\342\001\002\000\010\023\uff7e" +
    "\056\372\057\371\001\002\000\004\023\uff83\001\002\000" +
    "\004\034\375\001\002\000\040\005\060\013\066\014\047" +
    "\015\052\026\040\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\044\004\077\005\071\006\106\007\073\010\075\011" +
    "\102\034\375\036\103\037\074\040\104\041\110\042\100" +
    "\043\105\044\072\045\101\046\076\047\107\001\002\000" +
    "\010\023\uff7e\056\372\057\371\001\002\000\040\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6\055" +
    "\uffe6\060\uffe6\062\uffe6\067\uffe6\071\uffe6\077\uffe6\101\uffe6" +
    "\103\uffe6\001\002\000\040\015\052\016\013\017\024\020" +
    "\023\021\012\022\011\026\022\055\315\060\327\062\313" +
    "\067\326\071\314\077\015\101\321\103\333\001\002\000" +
    "\042\015\052\016\013\017\024\020\023\021\012\022\011" +
    "\026\022\035\u0102\055\315\060\327\062\313\067\326\071" +
    "\314\077\015\101\321\103\333\001\002\000\004\023\u0101" +
    "\001\002\000\042\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\026\uffc7\035\uffc7\055\uffc7\060\uffc7\062\uffc7" +
    "\067\uffc7\071\uffc7\077\uffc7\101\uffc7\103\uffc7\001\002\000" +
    "\016\023\uffe5\035\uffe5\051\uffe5\056\uffe5\057\uffe5\072\uffe5" +
    "\001\002\000\004\023\u0104\001\002\000\042\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\026\uffc8\035\uffc8" +
    "\055\uffc8\060\uffc8\062\uffc8\067\uffc8\071\uffc8\077\uffc8\101" +
    "\uffc8\103\uffc8\001\002\000\004\023\uff80\001\002\000\004" +
    "\023\uff7f\001\002\000\044\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\026\uff85\035\uff85\055\uff85\060\uff85" +
    "\061\uff85\062\uff85\067\uff85\071\uff85\077\uff85\101\uff85\103" +
    "\uff85\001\002\000\040\005\060\013\066\014\047\015\052" +
    "\026\040\031\036\032\046\033\061\050\043\075\042\104" +
    "\067\105\057\106\053\107\041\110\044\001\002\000\044" +
    "\004\077\005\071\006\106\007\073\010\075\011\102\027" +
    "\u010a\036\103\037\074\040\104\041\110\042\100\043\105" +
    "\044\072\045\101\046\076\047\107\001\002\000\004\034" +
    "\u010b\001\002\000\004\072\u010d\001\002\000\006\035\u0111" +
    "\072\u0112\001\002\000\040\005\060\013\066\014\047\015" +
    "\052\026\040\031\036\032\046\033\061\050\043\075\042" +
    "\104\067\105\057\106\053\107\041\110\044\001\002\000" +
    "\044\004\077\005\071\006\106\007\073\010\075\011\102" +
    "\036\103\037\074\040\104\041\110\042\100\043\105\044" +
    "\072\045\101\046\076\047\107\073\u010f\001\002\000\004" +
    "\034\342\001\002\000\006\035\uffa8\072\uffa8\001\002\000" +
    "\004\023\uffaa\001\002\000\040\005\060\013\066\014\047" +
    "\015\052\026\040\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\044\004\077\005\071\006\106\007\073\010\075\011" +
    "\102\036\103\037\074\040\104\041\110\042\100\043\105" +
    "\044\072\045\101\046\076\047\107\073\u0114\001\002\000" +
    "\004\034\342\001\002\000\006\035\uffa9\072\uffa9\001\002" +
    "\000\004\026\u0117\001\002\000\004\015\u0118\001\002\000" +
    "\004\070\u0119\001\002\000\004\015\u011a\001\002\000\004" +
    "\027\u011b\001\002\000\004\034\uff9d\001\002\000\004\034" +
    "\342\001\002\000\004\023\uff9c\001\002\000\044\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\026\uffc5\035" +
    "\uffc5\055\uffc5\060\uffc5\062\uffc5\067\uffc5\071\uffc5\074\uffc5" +
    "\077\uffc5\101\uffc5\103\uffc5\001\002\000\006\035\uffe3\051" +
    "\uffe3\001\002\000\004\023\u0121\001\002\000\044\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\035" +
    "\uffc6\055\uffc6\060\uffc6\062\uffc6\067\uffc6\071\uffc6\074\uffc6" +
    "\077\uffc6\101\uffc6\103\uffc6\001\002\000\006\015\u0123\075" +
    "\035\001\002\000\004\023\uffb2\001\002\000\044\004\077" +
    "\005\071\006\106\007\073\010\075\011\102\023\uffc4\036" +
    "\103\037\074\040\104\041\110\042\100\043\105\044\072" +
    "\045\101\046\076\047\107\001\002\000\004\023\uffc3\001" +
    "\002\000\040\005\060\013\066\014\047\015\052\026\040" +
    "\031\036\032\046\033\061\050\043\075\042\104\067\105" +
    "\057\106\053\107\041\110\044\001\002\000\042\005\060" +
    "\013\066\014\047\015\052\026\040\030\u012d\031\036\032" +
    "\046\033\061\050\043\075\042\104\067\105\057\106\053" +
    "\107\041\110\044\001\002\000\004\023\uff4f\001\002\000" +
    "\004\023\uff4c\001\002\000\040\005\060\013\066\014\047" +
    "\015\052\026\040\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\044\004\077\005\071\006\106\007\073\010\075\011" +
    "\102\023\uff4d\036\103\037\074\040\104\041\110\042\100" +
    "\043\105\044\072\045\101\046\076\047\107\001\002\000" +
    "\044\004\077\005\071\006\106\007\073\010\075\011\102" +
    "\023\uff7d\036\103\037\074\040\104\041\110\042\100\043" +
    "\105\044\072\045\101\046\076\047\107\001\002\000\004" +
    "\023\uff7c\001\002\000\044\004\077\005\071\006\106\007" +
    "\073\010\075\011\102\023\uff4e\036\103\037\074\040\104" +
    "\041\110\042\100\043\105\044\072\045\101\046\076\047" +
    "\107\001\002\000\044\004\077\005\071\006\106\007\073" +
    "\010\075\011\102\034\uff82\036\103\037\074\040\104\041" +
    "\110\042\100\043\105\044\072\045\101\046\076\047\107" +
    "\001\002\000\004\034\375\001\002\000\010\023\uff7e\056" +
    "\372\057\371\001\002\000\004\023\uff81\001\002\000\040" +
    "\005\060\013\066\014\047\015\052\026\040\031\036\032" +
    "\046\033\061\050\043\075\042\104\067\105\057\106\053" +
    "\107\041\110\044\001\002\000\044\004\077\005\071\006" +
    "\106\007\073\010\075\011\102\027\u0135\036\103\037\074" +
    "\040\104\041\110\042\100\043\105\044\072\045\101\046" +
    "\076\047\107\001\002\000\004\034\u0136\001\002\000\004" +
    "\072\u0138\001\002\000\006\035\u013c\072\u013d\001\002\000" +
    "\040\005\060\013\066\014\047\015\052\026\040\031\036" +
    "\032\046\033\061\050\043\075\042\104\067\105\057\106" +
    "\053\107\041\110\044\001\002\000\044\004\077\005\071" +
    "\006\106\007\073\010\075\011\102\036\103\037\074\040" +
    "\104\041\110\042\100\043\105\044\072\045\101\046\076" +
    "\047\107\073\u013a\001\002\000\004\034\375\001\002\000" +
    "\006\035\uffa6\072\uffa6\001\002\000\004\023\uffab\001\002" +
    "\000\040\005\060\013\066\014\047\015\052\026\040\031" +
    "\036\032\046\033\061\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\044\004\077\005" +
    "\071\006\106\007\073\010\075\011\102\036\103\037\074" +
    "\040\104\041\110\042\100\043\105\044\072\045\101\046" +
    "\076\047\107\073\u013f\001\002\000\004\034\375\001\002" +
    "\000\006\035\uffa7\072\uffa7\001\002\000\022\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\026\uffa0\077\uffa0" +
    "\001\002\000\022\016\013\017\024\020\023\021\012\022" +
    "\011\023\uff98\026\022\077\015\001\002\000\004\023\u0149" +
    "\001\002\000\006\015\u0145\075\035\001\002\000\006\023" +
    "\uff9b\024\u0146\001\002\000\040\005\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\026\uff9a\031\uff9a\032\uff9a\033\uff9a\050\uff9a\075" +
    "\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\001\002" +
    "\000\040\005\060\013\066\014\047\015\052\026\040\031" +
    "\036\032\046\033\061\050\043\075\042\104\067\105\057" +
    "\106\053\107\041\110\044\001\002\000\044\004\077\005" +
    "\071\006\106\007\073\010\075\011\102\023\uff99\036\103" +
    "\037\074\040\104\041\110\042\100\043\105\044\072\045" +
    "\101\046\076\047\107\001\002\000\040\005\060\013\066" +
    "\014\047\015\052\026\040\031\036\032\046\033\061\050" +
    "\043\075\042\104\067\105\057\106\053\107\041\110\044" +
    "\001\002\000\044\004\077\005\071\006\106\007\073\010" +
    "\075\011\102\023\u014b\036\103\037\074\040\104\041\110" +
    "\042\100\043\105\044\072\045\101\046\076\047\107\001" +
    "\002\000\006\015\u014c\027\uff91\001\002\000\020\024\uff7b" +
    "\063\uff7b\064\uff7b\065\uff7b\066\uff7b\075\137\102\136\001" +
    "\002\000\004\027\u0158\001\002\000\014\024\u0150\063\u0151" +
    "\064\u0152\065\u014f\066\u0153\001\002\000\040\005\060\013" +
    "\066\014\047\015\052\026\040\031\036\032\046\033\061" +
    "\050\043\075\042\104\067\105\057\106\053\107\041\110" +
    "\044\001\002\000\042\005\060\013\066\014\047\015\052" +
    "\026\040\030\u0156\031\036\032\046\033\061\050\043\075" +
    "\042\104\067\105\057\106\053\107\041\110\044\001\002" +
    "\000\004\027\uff95\001\002\000\004\027\uff92\001\002\000" +
    "\040\005\060\013\066\014\047\015\052\026\040\031\036" +
    "\032\046\033\061\050\043\075\042\104\067\105\057\106" +
    "\053\107\041\110\044\001\002\000\044\004\077\005\071" +
    "\006\106\007\073\010\075\011\102\027\uff93\036\103\037" +
    "\074\040\104\041\110\042\100\043\105\044\072\045\101" +
    "\046\076\047\107\001\002\000\044\004\077\005\071\006" +
    "\106\007\073\010\075\011\102\027\uff97\036\103\037\074" +
    "\040\104\041\110\042\100\043\105\044\072\045\101\046" +
    "\076\047\107\001\002\000\004\027\uff96\001\002\000\044" +
    "\004\077\005\071\006\106\007\073\010\075\011\102\027" +
    "\uff94\036\103\037\074\040\104\041\110\042\100\043\105" +
    "\044\072\045\101\046\076\047\107\001\002\000\004\034" +
    "\342\001\002\000\004\023\uff9f\001\002\000\004\034\uffe8" +
    "\001\002\000\004\034\375\001\002\000\006\035\uffe7\051" +
    "\uffe7\001\002\000\022\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\026\ufff5\051\ufff5\077\ufff5\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\006\004\003\030\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\234\001\001\000\014" +
    "\010\017\011\016\012\015\024\020\054\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\033\011\016\012\015\026\031\053\030\054\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\167" +
    "\011\016\012\015\054\007\001\001\000\002\001\001\000" +
    "\030\002\036\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\164\003\062" +
    "\051\064\056\054\057\055\060\053\071\047\072\063\073" +
    "\050\074\044\075\061\001\001\000\002\001\001\000\032" +
    "\002\152\003\062\050\153\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\067\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\127\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\126\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\125\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\124\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\123\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\122\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\121\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\120\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\117\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\116\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\115\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\114\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\113\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\112\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\111\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\030\002\110\003\062\051" +
    "\064\056\054\057\055\060\053\071\047\072\063\073\050" +
    "\074\044\075\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\133\003\062\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\147\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\032\002\140\003\062\051\064\052\141\056\054\057\055" +
    "\060\053\071\047\072\063\073\050\074\044\075\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\145\003\062\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\157\003\062\051\064\056\054\057\055\060\053\071\047" +
    "\072\063\073\050\074\044\075\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\162" +
    "\003\062\051\064\056\054\057\055\060\053\071\047\072" +
    "\063\073\050\074\044\075\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\172\011\016" +
    "\012\015\054\007\001\001\000\012\010\173\011\016\012" +
    "\015\054\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\202\011" +
    "\016\012\015\054\007\055\177\062\201\064\203\001\001" +
    "\000\002\001\001\000\012\010\206\011\016\012\015\054" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\211\003\062\051\064" +
    "\056\054\057\055\060\053\063\212\071\047\072\063\073" +
    "\050\074\044\075\061\001\001\000\002\001\001\000\030" +
    "\002\213\003\062\051\064\056\054\057\055\060\053\071" +
    "\047\072\063\073\050\074\044\075\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\202\011\016\012\015\054\007\055\217\001\001\000\002" +
    "\001\001\000\012\010\222\011\016\012\015\054\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\202\011\016\012\015\054" +
    "\007\055\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\222\011\016\012\015\054\007\062\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\235\001\001\000\016\005\236\010\240\011" +
    "\016\012\015\054\007\077\237\001\001\000\002\001\001" +
    "\000\004\022\251\001\001\000\006\013\241\014\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\245\003\062\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\250\001" +
    "\001\000\002\001\001\000\004\027\253\001\001\000\014" +
    "\010\017\011\016\012\015\024\257\054\007\001\001\000" +
    "\004\022\254\001\001\000\002\001\001\000\014\010\017" +
    "\011\016\012\015\024\257\054\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\261\001\001\000\002" +
    "\001\001\000\016\010\266\011\016\012\015\023\263\025" +
    "\264\054\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\270\011\016\012\015\054\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\274\011\016\012\015\054\007\001" +
    "\001\000\012\010\276\011\016\012\015\054\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\302\001\001\000\004\103\303" +
    "\001\001\000\002\001\001\000\056\005\307\006\333\010" +
    "\240\011\016\012\015\015\305\016\317\031\323\033\331" +
    "\034\310\035\306\036\304\044\327\046\321\047\322\051" +
    "\324\054\007\056\315\057\055\060\053\061\311\065\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\u012e\003" +
    "\062\051\064\056\054\057\055\060\053\071\047\072\063" +
    "\073\050\074\044\075\061\001\001\000\002\001\001\000" +
    "\030\002\u0123\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\002\001\001\000\012\010\u0121\011\016\012\015\054\007" +
    "\001\001\000\054\005\307\006\333\010\240\011\016\012" +
    "\015\015\305\016\317\031\323\033\331\034\310\035\306" +
    "\036\304\044\327\047\u011f\051\324\054\007\056\315\057" +
    "\055\060\053\061\311\065\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\u0115\001" +
    "\001\000\030\002\337\003\062\051\064\056\054\057\055" +
    "\060\053\071\047\072\063\073\050\074\044\075\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\335\003" +
    "\062\051\064\056\054\057\055\060\053\071\047\072\063" +
    "\073\050\074\044\075\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\340\001\001\000\004\037\342" +
    "\001\001\000\054\005\344\010\240\011\016\012\015\015" +
    "\343\016\352\033\357\034\310\035\306\036\304\040\350" +
    "\041\360\051\355\054\007\056\315\057\055\060\053\061" +
    "\346\065\356\066\353\067\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\364\003\062\051\064\056\054\057\055\060\053\071" +
    "\047\072\063\073\050\074\044\075\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\005\344" +
    "\010\240\011\016\012\015\015\343\016\352\033\357\034" +
    "\310\035\306\036\304\040\361\051\355\054\007\056\315" +
    "\057\055\060\053\061\346\065\356\066\353\067\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\365\001\001\000\004\037\366\001\001\000" +
    "\004\032\367\001\001\000\002\001\001\000\004\017\u0105" +
    "\001\001\000\030\002\372\003\062\051\064\056\054\057" +
    "\055\060\053\071\047\072\063\073\050\074\044\075\061" +
    "\001\001\000\004\017\373\001\001\000\004\032\u0104\001" +
    "\001\000\004\102\375\001\001\000\054\005\307\006\377" +
    "\007\376\010\240\011\016\012\015\015\305\016\317\031" +
    "\323\033\331\034\310\035\306\036\304\044\327\051\324" +
    "\054\007\056\315\057\055\060\053\061\311\065\330\001" +
    "\001\000\052\005\307\006\u0102\010\240\011\016\012\015" +
    "\015\305\016\317\031\323\033\331\034\310\035\306\036" +
    "\304\044\327\051\324\054\007\056\315\057\055\060\053" +
    "\061\311\065\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\u0108\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u010b\001\001" +
    "\000\002\001\001\000\030\002\u010d\003\062\051\064\056" +
    "\054\057\055\060\053\071\047\072\063\073\050\074\044" +
    "\075\061\001\001\000\002\001\001\000\004\037\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\u0112" +
    "\003\062\051\064\056\054\057\055\060\053\071\047\072" +
    "\063\073\050\074\044\075\061\001\001\000\002\001\001" +
    "\000\004\037\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\107\u011b\001\001\000\004\037" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\u012d\003\062\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\030\002\u012b\003\062\051\064\056\054\057\055\060" +
    "\053\071\047\072\063\073\050\074\044\075\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\u012a\003" +
    "\062\051\064\056\054\057\055\060\053\071\047\072\063" +
    "\073\050\074\044\075\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\u012f\001\001\000\004\017\u0130\001\001\000\004\032" +
    "\u0131\001\001\000\002\001\001\000\030\002\u0133\003\062" +
    "\051\064\056\054\057\055\060\053\071\047\072\063\073" +
    "\050\074\044\075\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0136\001\001\000\002\001\001\000" +
    "\030\002\u0138\003\062\051\064\056\054\057\055\060\053" +
    "\071\047\072\063\073\050\074\044\075\061\001\001\000" +
    "\002\001\001\000\004\017\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\u013d\003\062\051\064\056" +
    "\054\057\055\060\053\071\047\072\063\073\050\074\044" +
    "\075\061\001\001\000\002\001\001\000\004\017\u013f\001" +
    "\001\000\002\001\001\000\004\105\u0141\001\001\000\014" +
    "\010\u0143\011\016\012\015\042\u0142\054\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\110\u0146\001\001\000\030\002\u0147\003\062\051\064\056" +
    "\054\057\055\060\053\071\047\072\063\073\050\074\044" +
    "\075\061\001\001\000\002\001\001\000\030\002\u0149\003" +
    "\062\051\064\056\054\057\055\060\053\071\047\072\063" +
    "\073\050\074\044\075\061\001\001\000\002\001\001\000" +
    "\012\043\u014c\056\u014d\057\055\060\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\u0156\003\062\051\064\056\054\057\055\060\053\071\047" +
    "\072\063\073\050\074\044\075\061\001\001\000\030\002" +
    "\u0154\003\062\051\064\056\054\057\055\060\053\071\047" +
    "\072\063\073\050\074\044\075\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\u0153\003\062\051\064" +
    "\056\054\057\055\060\053\071\047\072\063\073\050\074" +
    "\044\075\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0158\001" +
    "\001\000\002\001\001\000\004\101\u015a\001\001\000\004" +
    "\017\u015b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  public boolean syntaxErrors;
  Lexer scanner;
  SymTable tablaVar = new SymTable(null);
  ASTInstBloque bloque;
  ASTBloquePrincipal principal;
  ProcTable promesas = new ProcTable();
  ProcTable funciones = new ProcTable();
  Registros reg = new Registros();
  SymTable list_articles= new SymTable(null);
  LinkedList pila = new LinkedList();
  int SRegistros = 0;
  int MaxSRegistros = 7;
  int vg = 0;
  info inf2;
  int numParam = 0;

  public parser(Lexer lex) {
    super(lex);
    scanner = lex;
  }

  public void report_error(String message, Object info) {
    syntaxErrors = true;
    System.out.print(message);
    if (!(info instanceof Symbol)) return;
      Symbol symbol = (Symbol) info;
    if ( symbol.left < 0 || symbol.right < 0 ) return;
      System.out.println(" en la linea "+symbol.left+", columna "+symbol.right);
  }

  FileOutputStream out = open();
  
  FileOutputStream open(){
    try{
      return new FileOutputStream("out.txt");
    }
    catch(Exception e){
      e.printStackTrace();
    }
    return null;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // asignacionRara ::= lvalue MENOSMENOS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteInt(1)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isFloat()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());

                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // asignacionRara ::= lvalue MENOSIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  

                                  if (v1.getTip().isNumber() && v2.getTip().isNumber()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1, v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // asignacionRara ::= lvalue MASIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (v1.getTip().isNumber() && v2.getTip().isNumber()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1, v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isString() && v2.getTip().isString()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprStringBin(new ASTExprId(v1.getId(),v1.getInfo()),(ASTExprString) v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // asignacionRara ::= lvalue MASMAS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteInt(1)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isFloat()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                    parser.bloque.add(RESULT);
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(), parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opruna ::= NEGACION 
            {
              String RESULT =null;
		RESULT = "NEGACION" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opruna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opruna ::= MINUS 
            {
              String RESULT =null;
		RESULT = "MINUS" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opruna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // iniarray ::= TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(new ASTExprCharCtte(v1.toCharArray()[0])); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // iniarray ::= expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(v1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // iniarray ::= iniarray COMA TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                          RESULT = v1; 
                                            if (((ASTExpr) v1.getFirst()).getTip().isChar())
                                              throw new DifTiposArrayException(parser.scanner.linea(),parser.scanner.columna());
                                          RESULT.add(new ASTExprCharCtte(v2.toCharArray()[0])); 
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // iniarray ::= iniarray COMA expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = v1;
                                            if (!((ASTExpr) v1.getFirst()).getTip().equals(v2.getTip()))
                                              throw new DifTiposArrayException(parser.scanner.linea(),parser.scanner.columna());
                                            else   
                                              RESULT.add(v2); 
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // atributo_struct ::= ID PUNTO ID 
            {
              ASTExprStructElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  //Chequeamos que este declarada
                  if (parser.tablaVar.exist(v1)){
                  info inf = parser.tablaVar.find(v1);
                  ASTExprLValue lvalue = new ASTExprId(v1, inf);
                  ASTTipo tipo = inf.obj;
                  
                  //Chequeamos que sea estructurada
                  if (tipo.isStruct())
                    //Chequeamos que el atributo exista
                    if (((ASTTipoStruct) tipo).exists(v2))
                      RESULT = new ASTExprStructElem(lvalue, v2, ((ASTTipoStruct)tipo).find(v2).obj,((ASTTipoStruct)tipo).find(v2) );
                    else
                      throw new NoExisteAtributoException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                  else
                    throw new NoEsEstructuraException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                }
                else
                  throw new VariableNoDeclaradaException(v1, parser.scanner.linea(),parser.scanner.columna());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // atributo_struct ::= atributo_struct PUNTO ID 
            {
              ASTExprStructElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprStructElem v1 = (ASTExprStructElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    //Chequeamos que sea una estructura
                    if (!v1.tipo.isStruct())
                      throw new NoEsEstructuraException(v1.toString(),parser.scanner.linea(),parser.scanner.columna()); 
                      
                    //Chequeamos que exista el atributo
                    if (((ASTTipoStruct) v1.tipo).exists(v2))
                      RESULT = new ASTExprStructElem(v1,v2,((ASTTipoStruct) v1.tipo).find(v2).obj,((ASTTipoStruct) v1.tipo).find(v2) );
                      else
                        throw new NoExisteAtributoException(v2,parser.scanner.linea(),parser.scanner.columna()); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // elem_array ::= ID LCORCHETE expr RCORCHETE 
            {
              ASTExprArrayElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                      if (!parser.tablaVar.exist(v1))
                                        throw new VariableNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna());
                                      else {
                                        ASTTipo tipo = parser.tablaVar.find(v1).obj;
                                        if (!tipo.isArray())
                                          throw new VariableNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna());
                                        
                                        if (!v2.getTip().isNumber())
                                          throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                        
                                        RESULT = new ASTExprArrayElem( new ASTExprId(v1, parser.tablaVar.find(v1)), ((ASTTipoArray) tipo).subclass, v2);
                                      }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem_array",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // elem_array ::= elem_array LCORCHETE expr RCORCHETE 
            {
              ASTExprArrayElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTExprArrayElem v1 = (ASTExprArrayElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        if (!v2.getTip().isNumber())
                                          throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                        if (!v1.lvalue.getTip().isArray())
                                          throw new Exception("Ya no es un arreglo!");
                                        RESULT = new ASTExprArrayElem(v1,((ASTTipoArray) v1.getTip()).subclass, v2);
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem_array",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr ::= read_char 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprReadChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr ::= read_float 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprReadFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr ::= read_bool 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprReadBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr ::= read_string 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprReadString v1 = (ASTExprReadString)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expr ::= read_int 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprReadInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr ::= lvalue 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1 ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr ::= LCORCHETE iniarray RCORCHETE 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                        ASTExprArrayCtte c = new ASTExprArrayCtte(v1);
                                        RESULT = c; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr ::= FALSE 
            {
              ASTExpr RESULT =null;
		 RESULT = new ASTExprBoolCtte(false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr ::= TRUE 
            {
              ASTExpr RESULT =null;
		RESULT = new ASTExprBoolCtte(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr ::= TKSTRING 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprStringCtte(v1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr ::= TKFLOAT 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprAritCtteFloat( Float.valueOf(v1).floatValue()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr ::= TKENTERO 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTExprAritCtteInt( Integer.parseInt((String) v1));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr ::= LPAREN expr RPAREN 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr ::= llamadafuncion 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (ASTExpr) v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr ::= opruna expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (v1.equals("MINUS")){
                                  if (!v2.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  RESULT = new ASTExprAritUna("-", v2) ;
                                }
                                else if (v1.equals("NEGACION")){
                                  if (!v2.getTip().isBool())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  RESULT = new ASTExprBoolUna(v2); 
                                }
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr ::= expr O expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("O", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= expr OO expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("OO", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr ::= expr I expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("I", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr ::= expr II expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("II", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= expr DIFERENTE expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().equals(v3.getTip()))
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                if (v1.getTip().isNumber())
                                  RESULT = new ASTExprBoolBinExpr("DIFERENTE",  v1, v3);
                                else if (v1.getTip().isBool())
                                  RESULT = new ASTExprBoolBinBool("DIFERENTE",v1,v3);
                                else if (v1.getTip().isChar())
                                  RESULT = new ASTExprBoolUna(new ASTExprBoolBinChar(v1,v3));
                                else if (v1.getTip().isString())
                                  RESULT = new ASTExprBoolUna(new ASTExprBoolBinString(v1,v3));
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= expr IGUALIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!(v1.getTip().equals(v3.getTip())))
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                if (v1.getTip().isNumber())
                                  RESULT = new ASTExprBoolBinExpr("IGUALIGUAL",  v1, v3);
                                else if (v1.getTip().isBool())
                                  RESULT = new ASTExprBoolBinBool("IGUALIGUAL",v1,v3);
                                else if (v1.getTip().isChar())
                                  RESULT = new ASTExprBoolBinChar(v1,v3);
                                else if (v1.getTip().isString())
                                  RESULT = new ASTExprBoolBinString(v1,v3);
                                else if (v1.getTip().isStruct())
                                  RESULT = new ASTExprBoolBinExpr("IGUALIGUAL", v1,v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= expr MENORIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinExpr("MENORIGUAL",  v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= expr MAYORIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinExpr("MAYORIGUAL",  v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr ::= expr MENOR expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprBoolBinExpr("MENOR", v1, v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expr MAYOR expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprBoolBinExpr("MAYOR",v1,v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expr DIV expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("div",v1,v3); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expr MOD expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("%",v1,v3) ;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= expr DIVIDE expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber()) 
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("/",v1,v3); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= expr MINUS expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber()) 
                                throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("-",v1,v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= expr TIMES expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprAritBin("*",  v1,v3) ;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= expr PLUS expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!((v1.getTip().isNumber() && v3.getTip().isNumber()) || (v1.getTip().isString() && v3.getTip().isString()))) 
                                 throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                               if (v1.getTip().isNumber()) 
                                  RESULT = new ASTExprAritBin("+", v1, v3);
                               else if (v1.getTip().isString())
                                  RESULT = new ASTExprStringBin((ASTExprString) v1,(ASTExprString) v3);

                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // lvalue ::= atributo_struct 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprStructElem v1 = (ASTExprStructElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // lvalue ::= elem_array 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprArrayElem v1 = (ASTExprArrayElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // lvalue ::= ID 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  if (!parser.tablaVar.exist(v1))
    throw new VariableNoDeclaradaException(v1,parser.scanner.linea(), parser.scanner.columna());
  else 
    RESULT = new ASTExprId(v1, parser.tablaVar.find(v1));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // asignacion ::= lvalue IGUAL TKCHAR 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              ASTInstAsig a = new ASTInstAsigExp(v1,new ASTExprCharCtte(v2.toCharArray()[0]));
                              if (a.checkAsig(v1.getTip())){
                                RESULT = a;
                                parser.bloque.add(RESULT);  
                              }
                              else
                              throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // asignacion ::= lvalue IGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      ASTInstAsig a = new ASTInstAsigExp(v1,v2);
                                      a.asigna(v1.getTip());
                                      if (a.checkAsig(v1.getTip())){
                                        RESULT = a;
                                        parser.bloque.add(RESULT);  
                                      }
                                      else 
                                        throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // elseif ::= 
            {
              LinkedList RESULT =null;
		RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // elseif ::= ELSE bloque 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); RESULT.add(new ASTInstElse(parser.bloque)); parser.bloque = parser.bloque.padre; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // elseif ::= ELSEIF expr bloque elseif 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool())
                                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                                  v3.addFirst(new ASTInstElseIf(v1,parser.bloque)); 
                                                  RESULT = v3; 
                                                  parser.bloque = parser.bloque.padre; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // seleccion ::= IF expr NT$12 bloque elseif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool())
      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
    parser.bloque.padre.add(new ASTInstIf(parser.bloque,v1,v3));
    parser.bloque = parser.bloque.padre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$12 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.bloque = new ASTInstBloque(parser.bloque); 
                           parser.tablaVar = new SymTable(parser.tablaVar);
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // seleccion1 ::= IF expr NT$11 bloqueR elseif 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool())
      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
    parser.bloque.padre.add(new ASTInstIf(parser.bloque,v1,v3));
    parser.bloque = parser.bloque.padre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$11 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.bloque = new ASTInstBloque(parser.bloque); 
                           parser.tablaVar = new SymTable(parser.tablaVar);
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // stmtsRS ::= stmtsR PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList() ;
    if (v1 != null){
      RESULT.add(v1);
    }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsRS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // stmtsRS ::= stmtsRS stmtsR PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = v1;
    if (v1 != null)
      RESULT.add(v1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsRS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // stmtsR ::= BREAK 
            {
              Object RESULT =null;
		 parser.bloque.add(new ASTInstBreak()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stmtsR ::= imprime 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtsR ::= deftipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtsR ::= llamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtsR ::= switche1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stmtsR ::= repeticion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stmtsR ::= seleccion1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stmtsR ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtsR ::= asignacionRara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // stmtsR ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asig ::= 
            {
              ASTInstAsig RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asig ::= lvalue MENOSMENOS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteInt(1)));
                                  else if (v1.getTip().isFloat())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());

                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asig ::= lvalue MENOSIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  

                                  if (v1.getTip().isNumber() && v2.getTip().isNumber())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1, v2));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asig ::= lvalue MASIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (v1.getTip().isNumber() && v2.getTip().isNumber())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1, v2));
                                  else if (v1.getTip().isString() && v2.getTip().isString())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprStringBin(new ASTExprId(v1.getId(),v1.getInfo()),(ASTExprString) v2));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asig ::= lvalue MASMAS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteInt(1)));
                                  else if (v1.getTip().isFloat())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(), parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // asig ::= lvalue IGUAL TKCHAR 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              if (v1.getTip().isChar())
                                RESULT = new ASTInstAsigExp(v1,new ASTExprCharCtte(v2.toCharArray()[0])); 
                                else
                                  throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // asig ::= lvalue IGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    ASTInstAsig ret = new ASTInstAsigExp(v1, v2);
                                    if (!ret.checkAsig(v1.getTip()))
                                      throw new TiposIncompatiblesException(v2.toString(), parser.scanner.linea(),parser.scanner.columna());
                                    RESULT = ret;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // dec ::= 
            {
              LinkedList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // dec ::= tipo ID IGUAL NT$10 expr 
            {
              LinkedList RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (LinkedList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new LinkedList(); 
                        RESULT.add(v1);
                        ASTInstAsig ret = new ASTInstAsigExp(new ASTExprId(v2, parser.tablaVar.find(v2)), v3);
                        if (!ret.checkAsig(v1))
                          throw new TiposIncompatiblesException(v2, parser.scanner.linea(),parser.scanner.columna());
                        RESULT.add(new declaracion(v2,ret,true));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$10 ::= 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        parser.tablaVar.put(v2,new info(v1));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dec ::= tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        parser.tablaVar.put(v2,new info(v1)); 
                        RESULT = new LinkedList() ; 
                        RESULT.add(v1); 
                        RESULT.add(new declaracion(v2,null,false)); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // rep3 ::= FOREACH NT$8 LPAREN ID IN ID RPAREN NT$9 bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    parser.bloque.padre.add(new ASTInstForeach( parser.inf2,parser.tablaVar.find(v2),parser.bloque));
                    parser.bloque = parser.bloque.padre;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    if (!parser.tablaVar.exist(v2))
                      throw new VariableNoDeclaradaException(v1,parser.scanner.linea(), parser.scanner.columna());
                    info infarray = parser.tablaVar.find(v2);
                    ASTTipo tipo = infarray.obj;
                    if (!tipo.isArray())
                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                    
                    // Agrego el elemento creado
                    info inf =new info(((ASTTipoArray) tipo).subclass);
                    parser.inf2 = inf;
                    parser.tablaVar.put(v1, inf);
                    parser.bloque = new ASTInstBloque(parser.bloque); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$8 ::= 
            {
              Object RESULT =null;

                   parser.tablaVar = new SymTable(parser.tablaVar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rep2 ::= FOR LPAREN NT$7 dec PYC expr PYC asig RPAREN bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTInstAsig v3 = (ASTInstAsig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if (!v2.getTip().isBool())
                                    throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  if (v1 != null)
                                    parser.bloque.padre.add(new ASTInstFor(((declaracion) v1.get(1)).getArbol(),v2,v3,parser.bloque));
                                  else
                                    parser.bloque.padre.add(new ASTInstFor(null,v2,v3,parser.bloque));
                                  parser.bloque = parser.bloque.padre;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$7 ::= 
            {
              Object RESULT =null;

                      parser.tablaVar = new SymTable(parser.tablaVar); 
                      parser.bloque = new ASTInstBloque(parser.bloque); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rep1 ::= WHILE expr NT$6 bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if (!v1.getTip().isBool())
                                throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              parser.bloque.padre.add(new ASTInstWhile(v1,parser.bloque));
                              parser.bloque = parser.bloque.padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$6 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                          parser.tablaVar = new SymTable(parser.tablaVar);
                          parser.bloque = new ASTInstBloque(parser.bloque); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // repeticion ::= rep3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // repeticion ::= rep2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // repeticion ::= rep1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case ::= CASE expr DOSPUNTOS bloque 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LinkedList();
                                  if (v1 == null)
                                    System.out.println("En el case, la expr es nula");
                                  if (v1.Id())
                                    throw new NoIdException(parser.scanner.linea(), parser.scanner.columna());
                                  RESULT.add(v1);
                                  RESULT.add(parser.bloque);
                                  parser.bloque = parser.bloque.padre;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case ::= case CASE expr DOSPUNTOS bloque 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = v1; 
                                                  if (v1 == null)
                                                    System.out.println("En el case, la expr es nula");
                                                  if (v2.Id())
                                                    throw new NoIdException(parser.scanner.linea(),parser.scanner.columna());
                                                  RESULT.add(v2);
                                                  RESULT.add(parser.bloque);
                                                  parser.bloque = parser.bloque.padre;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case1 ::= CASE expr DOSPUNTOS bloqueR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LinkedList();
                                  if (v1 == null)
                                    System.out.println("En el case, la expr es nula");
                                  if (v1.Id())
                                    throw new NoIdException(parser.scanner.linea(), parser.scanner.columna());
                                  RESULT.add(v1);
                                  RESULT.add(parser.bloque);
                                  parser.bloque = parser.bloque.padre;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // case1 ::= case1 CASE expr DOSPUNTOS bloqueR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = v1; 
                                                  if (v1 == null)
                                                    System.out.println("En el case, la expr es nula");
                                                  if (v2.Id())
                                                    throw new NoIdException(parser.scanner.linea(),parser.scanner.columna());
                                                  RESULT.add(v2);
                                                  RESULT.add(parser.bloque);
                                                  parser.bloque = parser.bloque.padre;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switche1 ::= SWITCH LPAREN expr RPAREN LLLAVE case1 RLLAVE 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  LinkedList casos = new LinkedList(); 
                                                                  LinkedList bloques = new LinkedList();
                                                                  for (int i = 0; i < v2.size(); i++){
                                                                    if (i%2 == 0){
                                                                      ASTExpr caseexp = (ASTExpr)v2.get(i);
                                                                      if (!caseexp.getTip().isCompatible(v1.getTip()) )
                                                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                                                      
                                                                      //Casteo Implicito
                                                                      if (v1.getTip().isFloat() && caseexp.getTip().isEntero())
                                                                        caseexp = new ASTExprCast(caseexp, new ASTTipoFloat());

                                                                      casos.add(caseexp);
                                                                    } else
                                                                      bloques.add(v2.get(i));
                                                                  }  
                                                                  parser.bloque.add(new ASTInstSwitch(v1,casos,bloques));
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switche1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switche ::= SWITCH LPAREN expr RPAREN LLLAVE case RLLAVE 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  LinkedList casos = new LinkedList(); 
                                                                  LinkedList bloques = new LinkedList();
                                                                  for (int i = 0; i < v2.size(); i++){
                                                                    if (i%2 == 0){
                                                                      ASTExpr caseexp = (ASTExpr)v2.get(i);
                                                                      if (!caseexp.getTip().isCompatible(v1.getTip()) )
                                                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                                                      
                                                                      //Casteo Implicito
                                                                      if (v1.getTip().isFloat() && caseexp.getTip().isEntero())
                                                                        caseexp = new ASTExprCast(caseexp, new ASTTipoFloat());

                                                                      casos.add(caseexp);
                                                                    } else
                                                                      bloques.add(v2.get(i));
                                                                  }  
                                                                  parser.bloque.add(new ASTInstSwitch(v1,casos,bloques));
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switche",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parame ::= 
            {
              LinkedList RESULT =null;
		RESULT = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parame ::= TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList(); RESULT.add(new ASTExprCharCtte(v1.toCharArray()[0])); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parame ::= expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parame ::= parame COMA TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1; RESULT.add(new ASTExprCharCtte(v2.toCharArray()[0])); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parame ::= parame COMA expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; RESULT.add(v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamadafuncion ::= ID LPAREN parame RPAREN 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (!parser.promesas.isHere(v1))
                                                    throw new FuncionNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                                                  if (!parser.promesas.param(v1,v2))
                                                    throw new ParametrosException(v1,parser.scanner.linea(),parser.scanner.columna());
                                                  String ret = parser.funciones.getRet(v1).toString(); 
                                                  Proc procInfo = parser.funciones.get(v1);                                                 
                                                  ASTInstFuncion f1 = new ASTInstFuncion(v2, procInfo);
                                                  if (procInfo.retType.isVoid()){
                                                    RESULT = f1;
                                                  } else
                                                    RESULT = new ASTExprFun(procInfo.retType, f1); 
                                                    System.out.println(procInfo.retType);
                                                     
                                                  //Por que si es void no se agrega la llamada a función?
                                                  //if (!ret.equals("VOID"))
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // deftipo ::= TYPEDEF tipo ID 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    if (parser.tablaVar.exist(v2))
                                      throw new YaExisteException(v2,parser.scanner.linea(),parser.scanner.columna());
                                    else {
                                      parser.tablaVar.put(v2,new info(new ASTTipoTipo(v1)));
                                    }
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // imprime ::= PRINT LPAREN expr RPAREN 
            {
              ASTInst RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                parser.bloque.add(new ASTInstImprime(v1)); 
                                              
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprime",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // read_float ::= READ_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_float",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // read_string ::= READ_STRING LPAREN expr RPAREN 
            {
              ASTExprReadString RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (!v1.getTip().isNumber())
      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
    RESULT = new ASTExprReadString(v1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_string",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // read_char ::= READ_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_char",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // read_bool ::= READ_BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_bool",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // read_int ::= READ_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_int",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmt ::= imprime 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmt ::= deftipo 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt ::= llamadafuncion 
            {
              ASTInst RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    parser.bloque.add((ASTInst) v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt ::= switche 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= repeticion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= seleccion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= declaracion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= asignacionRara 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= asignacion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtb ::= stmt 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtb ::= RETURN CHAR 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ASTInstReturn ir = new ASTInstReturn(new ASTExprCharCtte(v1.toCharArray()[0]));
                    parser.bloque.add(ir); 
                    RESULT = true;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtb ::= RETURN expr 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ASTInstReturn ir = new ASTInstReturn(v1);
                    ir.retParam = parser.tablaVar.retParam();
                    //System.out.println(parser.tablaVar.tamParam());
                    parser.bloque.add(ir); 
                    RESULT = true;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtsb ::= stmtb PYC 
            {
              Boolean[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean v1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Boolean[2];
                  RESULT[0]=v1;
                  RESULT[1]=v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsb",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtsb ::= stmtsb stmtb PYC 
            {
              Boolean[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean[] v1 = (Boolean[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean v2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = v1;
                                    RESULT[0] = RESULT[0] || v2;
                                    RESULT[1] = v2;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsb",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmts ::= stmt PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTInst v1 = (ASTInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList() ;
                                  if (v1 != null){
                                    RESULT.add(v1);
                                  }  
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmts ::= stmts stmt PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTInst v2 = (ASTInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v1 ; if (v2 != null) { RESULT.add(v2);}   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipobasicos ::= CHAR 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipobasicos ::= BOOL 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipobasicos ::= FLOAT 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipobasicos ::= STRING 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipobasicos ::= ENTERO 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_union ::= expr DOSPUNTOS LLLAVE lista_estructura RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v2 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new structUnion(v1, v2.st, v2.tam); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_union",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_union ::= lista_union expr DOSPUNTOS LLLAVE lista_estructura RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		structUnion v1 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v3 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (!v1.agregar(v2, v3.st))
        throw new Exception("Se repiten los id");
      RESULT = v1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_union",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // union ::= UNION tipo ID LLLAVE lista_union RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v3 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              //Actualizando el discriminante 
              v3.discriminante = v2;   
               
             //Chequeo que no hayan usado el discrimante dentro de ningun case.
             if(v3.existAll(v2))
               throw new MismoNombreStructException(parser.scanner.linea(), parser.scanner.columna());
             //Chequeo de que las expresiones en el case son iguales al discriminante
             if (!v1.equals(v3.tipo))
               throw new SwitchException(parser.scanner.linea(), parser.scanner.columna());
             
             RESULT = v3; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_estructura ::= tipo ID 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                  RESULT = new ASTTipoStruct(new info(v1),v2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_estructura ::= lista_estructura COMA tipo ID 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v1; 
                      if (!v1.st.containsKey(v3)){
                        v1.agregar(new info(v2),v3);
                      }else
                        throw new MismoNombreStructException(parser.scanner.linea(), parser.scanner.columna());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // st ::= union RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v1 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ASTTipoStruct(v1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // st ::= lista_estructura RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = v1;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // st ::= lista_estructura COMA union RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v2 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = v1;
                    v1.union = v2;
                    if (!v1.checkAll()) 
                      throw new UnionException(parser.scanner.linea(), parser.scanner.columna());
                    //Se agrega el campo discriminante
                    v1.agregar(new info(v2.tipo), v2.discriminante);
                    v1.setCamposUnion();

                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struct_identifier ::= STRUCT LLLAVE st 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_identifier",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipocompuesto ::= LPAREN ID RPAREN 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

               if (!parser.tablaVar.exist(v1))
                 throw new TipoNoDeclaradoException(v1,parser.scanner.linea(),parser.scanner.columna());
               else {
                 ASTTipo tipo = parser.tablaVar.find(v1).obj;
                 if (!tipo.isTipo())
                   throw new TipoNoDeclaradoException(v1,parser.scanner.linea(),parser.scanner.columna());
                 
                 RESULT = ((ASTTipoTipo) tipo).getRealTipo();
               }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipocompuesto ::= struct_identifier 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipocompuesto ::= tipo LCORCHETE expr RCORCHETE 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if (!v2.getTip().isNumber())
                  throw new UsoIndebidoException(parser.scanner.linea(), parser.scanner.columna());
                RESULT = new ASTTipoArray(v1,(ASTExprArit) v2);                                
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo ::= tipocompuesto 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= tipobasicos 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multdeclar1 ::= ID IGUAL TKCHAR 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion(v1,new ASTInstAsigExp(new ASTExprId(v1, null),new ASTExprCharCtte(v2.toCharArray()[0])),true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multdeclar1 ::= ID IGUAL expr 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new declaracion(v1, new ASTInstAsigExp(new ASTExprId(v1, null),v2), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multdeclar1 ::= ID 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion(v1,null,false) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multdeclar ::= multdeclar1 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaracion v1 = (declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList x = new LinkedList() ; x.add(v1); RESULT = x;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // multdeclar ::= multdeclar COMA multdeclar1 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaracion v2 = (declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; RESULT.add(v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= tipo multdeclar 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList();
                              for(int i =0; i < v2.size();i++){
                                if (parser.tablaVar.isHere(((declaracion) v2.get(i)).getId()))
                                  throw new YaExisteException(((declaracion) v2.get(i)).getId(),parser.scanner.linea(),parser.scanner.columna());
                                else{
                                    info inf = new info(v1);
                                  parser.tablaVar.put(((declaracion) v2.get(i)).getId(),inf );
                                  declaracion dec = (declaracion) v2.get(i);
                                  if (dec.tieneArbol()){
                                    dec.getArbol().asigna(v1);
                                    dec.getArbol().lva(inf);
                                    if(dec.getArbol().checkAsig(v1))
                                      parser.bloque.add(dec.getArbol());
                                    else{ 
                                      throw new TiposIncompatiblesException(dec.getId(), parser.scanner.linea(), parser.scanner.columna());
                                    }
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloqueR ::= LLLAVE stmtsRS RLLAVE 
            {
              Object RESULT =null;
		 parser.bloque.addTable(parser.tablaVar);
                                    parser.tablaVar = parser.tablaVar.prev ;  
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloqueb ::= LLLAVE NT$5 stmtsb RLLAVE 
            {
              Boolean[] RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Boolean[]) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean[] v1 = (Boolean[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.bloque.addTable(parser.tablaVar);
                                          parser.tablaVar = parser.tablaVar.prev ; 
                                          RESULT = v1;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueb",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Boolean[] RESULT =null;
 parser.bloque = new ASTInstBloque(parser.bloque); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloque ::= LLLAVE NT$4 stmts RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.bloque.addTable(parser.tablaVar);
                                    parser.tablaVar = parser.tablaVar.prev ; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.bloque = new ASTInstBloque(parser.bloque); 
                    parser.tablaVar = new SymTable(parser.tablaVar);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // principal ::= SUB MAIN NT$3 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.principal.addMain(parser.bloque); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.tablaVar= new SymTable(parser.tablaVar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // referencia ::= REF tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.numParam = 0; 
                    if (parser.tablaVar.isHere(v2))
                      throw new YaExisteException(v2,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v2,new info(v1, parser.numParam++, "ref"));
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // referencia ::= tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.numParam = 0; 
                    if (parser.tablaVar.isHere(v2))
                      throw new YaExisteException(v2,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v2,new info(v1, parser.numParam++, "valor"));
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // referencia ::= referencia COMA REF tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                    if (parser.tablaVar.isHere(v3))
                      throw new YaExisteException(v3,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v3,new info (v2, parser.numParam++, "ref"));

    RESULT = v1 ; 
    v1.add(v2); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // referencia ::= referencia COMA tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (parser.tablaVar.isHere(v3))
      throw new YaExisteException(v3,parser.scanner.linea(), parser.scanner.columna());
    parser.tablaVar.put(v3,new info(v2, parser.numParam++, "valor"));
    RESULT = v1 ; 
    v1.add(v2); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= referencia 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoP ::= VOID 
            {
              ASTTipo RESULT =null;
		RESULT = new ASTTipoVoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoP ::= tipo 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procedimiento ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimiento ::= procedimiento SUB tipoP ID NT$2 LPAREN param RPAREN bloqueb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v4 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean[] v5 = (Boolean[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (v2.isVoid()){
                        if (v5[0])
                          throw new FuncionVoidConReturnException(v3,parser.scanner.linea(),parser.scanner.columna());
                      }else{
                        if (!v5[1])
                          throw new FuncionNoVoidSinReturnException(v3,parser.scanner.linea(),parser.scanner.columna());
                      }
                      Proc a = new Proc(v3,v2,v4, parser.bloque);
                      if (parser.promesas.equals(v3,a)){
                        parser.principal.add(v3,a);
                        parser.funciones.add(v3,a);
                      } else
                        throw new FuncionNoDeclaradaException(v3, parser.scanner.linea(), parser.scanner.columna());
                      parser.bloque = parser.bloque.padre;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.tablaVar= new SymTable(parser.tablaVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= declaraciones declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // referencias ::= REF tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new LinkedList(); 
                        RESULT.add(v1); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // referencias ::= tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // referencias ::= referencias COMA REF tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v1 ; 
    v1.add(v2); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // referencias ::= referencias COMA tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v1 ; 
    v1.add(v2); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // params ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= referencias 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // promesas ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("promesas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // promesas ::= promesas SUB tipoP ID LPAREN params RPAREN PYC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.promesas.add(v2, new Proc(v2,v1,v3));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("promesas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicial ::= promesas LLLAVE NT$0 declaraciones NT$1 procedimiento principal procedimiento RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if(!parser.funciones.equals(parser.promesas))
                throw new PromesaNoDeclaradaException(parser.scanner.linea(), parser.scanner.columna());
              //System.out.println(parser.principal);
              parser.principal.toCode(0,0);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.principal = new ASTBloquePrincipal(parser.tablaVar,parser.bloque); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.bloque = new ASTInstBloque(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

