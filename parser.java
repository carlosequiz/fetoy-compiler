
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 29 16:22:16 VET 2010
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Hashtable;
import java.util.Vector;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 29 16:22:16 VET 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\067\002\000\002\004" +
    "\013\000\002\030\012\000\002\030\002\000\002\053\003" +
    "\000\002\053\002\000\002\026\005\000\002\026\006\000" +
    "\002\026\003\000\002\026\004\000\002\021\005\000\002" +
    "\021\002\000\002\070\002\000\002\022\013\000\002\022" +
    "\002\000\002\024\003\000\002\024\003\000\002\023\003" +
    "\000\002\023\002\000\002\025\006\000\002\025\007\000" +
    "\002\025\004\000\002\025\005\000\002\071\002\000\002" +
    "\027\006\000\002\072\002\000\002\017\006\000\002\073" +
    "\002\000\002\020\006\000\002\037\005\000\002\005\004" +
    "\000\002\013\005\000\002\013\003\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\010\003\000\002" +
    "\010\003\000\002\012\006\000\002\012\003\000\002\012" +
    "\005\000\002\054\005\000\002\065\006\000\002\065\004" +
    "\000\002\065\004\000\002\055\006\000\002\055\004\000" +
    "\002\062\010\000\002\063\010\000\002\063\007\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\007\005\000\002\007\004" +
    "\000\002\046\005\000\002\046\004\000\002\047\003\000" +
    "\002\047\004\000\002\047\004\000\002\047\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\066\006\000" +
    "\002\061\005\000\002\051\006\000\002\052\005\000\002" +
    "\052\005\000\002\052\003\000\002\052\003\000\002\052" +
    "\002\000\002\044\011\000\002\045\007\000\002\045\006" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\074\002\000\002\034\006\000\002\075\002\000\002" +
    "\035\014\000\002\076\002\000\002\077\002\000\002\036" +
    "\013\000\002\042\004\000\002\100\002\000\002\042\007" +
    "\000\002\042\002\000\002\043\005\000\002\043\005\000" +
    "\002\043\004\000\002\043\005\000\002\043\005\000\002" +
    "\043\004\000\002\043\002\000\002\040\005\000\002\040" +
    "\004\000\002\041\003\000\002\041\004\000\002\031\006" +
    "\000\002\032\006\000\002\032\004\000\002\032\002\000" +
    "\002\015\005\000\002\015\005\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\005\000\002\002\003\000\002\060\006\000\002\060" +
    "\006\000\002\057\005\000\002\057\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\003\000\002\050\003\000" +
    "\002\003\003\000\002\003\003\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\024\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\026\ufff5\034\ufff5\051\ufff5\077\ufff5\001\002\000\024" +
    "\016\013\017\023\020\022\021\015\022\011\026\021\034" +
    "\ufffd\051\ufffd\077\014\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\012\015\uffd9\025\uffd9\027" +
    "\uffd9\075\uffd9\001\002\000\012\015\uffdb\025\uffdb\027\uffdb" +
    "\075\uffdb\001\002\000\012\015\uffcb\025\uffcb\027\uffcb\075" +
    "\uffcb\001\002\000\006\034\214\051\213\001\002\000\012" +
    "\015\uffce\025\uffce\027\uffce\075\uffce\001\002\000\004\034" +
    "\155\001\002\000\012\015\uffcd\025\uffcd\027\uffcd\075\uffcd" +
    "\001\002\000\012\015\uffdc\025\uffdc\027\uffdc\075\uffdc\001" +
    "\002\000\004\023\154\001\002\000\006\015\027\075\031" +
    "\001\002\000\004\015\024\001\002\000\012\015\uffca\025" +
    "\uffca\027\uffca\075\uffca\001\002\000\012\015\uffcc\025\uffcc" +
    "\027\uffcc\075\uffcc\001\002\000\004\027\025\001\002\000" +
    "\012\015\uffd8\025\uffd8\027\uffd8\075\uffd8\001\002\000\006" +
    "\023\uffe2\025\152\001\002\000\010\023\uffdf\024\147\025" +
    "\uffdf\001\002\000\006\023\uffe0\025\uffe0\001\002\000\026" +
    "\005\034\013\036\014\041\015\044\026\047\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\056\004\uff76" +
    "\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\023\uff76\025" +
    "\uff76\027\uff76\034\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\073" +
    "\uff76\076\uff76\001\002\000\072\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\023\uff8d\024\uff8d\025\uff8d\027" +
    "\uff8d\034\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\063\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\073\uff8d\075\144\076\uff8d\001\002" +
    "\000\026\005\uff69\013\uff69\014\uff69\015\uff69\026\uff69\031" +
    "\uff69\032\uff69\033\uff69\050\uff69\075\uff69\001\002\000\030" +
    "\005\034\013\036\014\041\015\044\026\047\030\137\031" +
    "\032\032\037\033\043\050\050\075\035\001\002\000\056" +
    "\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\023" +
    "\uff78\025\uff78\027\uff78\034\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047" +
    "\uff78\073\uff78\076\uff78\001\002\000\056\004\uff75\005\uff75" +
    "\006\uff75\007\uff75\010\uff75\011\uff75\023\uff75\025\uff75\027" +
    "\uff75\034\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\073\uff75\076" +
    "\uff75\001\002\000\072\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c\034" +
    "\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\073\uff8c\076\uff8c\102\133\001\002\000\056" +
    "\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\023" +
    "\uff77\025\uff77\027\uff77\034\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047" +
    "\uff77\073\uff77\076\uff77\001\002\000\026\005\034\013\036" +
    "\014\041\015\044\026\047\031\032\032\037\033\043\050" +
    "\050\075\035\001\002\000\056\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\023\uff74\025\uff74\027\uff74\034" +
    "\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\045\uff74\046\uff74\047\uff74\073\uff74\076\uff74\001" +
    "\002\000\076\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\011\uff8e\023\uff8e\024\uff8e\025\uff8e\026\116\027\uff8e\034" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\073\uff8e\075\117\076\uff8e\102\115\001\002" +
    "\000\044\004\062\005\054\006\071\007\056\010\060\011" +
    "\066\036\065\037\057\040\067\041\073\042\063\043\053" +
    "\044\055\045\064\046\061\047\072\076\114\001\002\000" +
    "\056\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\023\uff7a\025\uff7a\027\uff7a\034\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a" +
    "\047\uff7a\073\uff7a\076\uff7a\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\026\005\uff68\013\uff68\014" +
    "\uff68\015\uff68\026\uff68\031\uff68\032\uff68\033\uff68\050\uff68" +
    "\075\uff68\001\002\000\056\004\uff72\005\uff72\006\uff72\007" +
    "\uff72\010\uff72\011\uff72\023\uff72\025\uff72\027\uff72\034\uff72" +
    "\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044" +
    "\uff72\045\uff72\046\uff72\047\uff72\073\uff72\076\uff72\001\002" +
    "\000\044\004\062\005\054\006\071\007\056\010\060\011" +
    "\066\027\070\036\065\037\057\040\067\041\073\042\063" +
    "\043\053\044\055\045\064\046\061\047\072\001\002\000" +
    "\026\005\034\013\036\014\041\015\044\026\047\031\032" +
    "\032\037\033\043\050\050\075\035\001\002\000\026\005" +
    "\034\013\036\014\041\015\044\026\047\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\026\005\034\013\036\014" +
    "\041\015\044\026\047\031\032\032\037\033\043\050\050" +
    "\075\035\001\002\000\026\005\034\013\036\014\041\015" +
    "\044\026\047\031\032\032\037\033\043\050\050\075\035" +
    "\001\002\000\026\005\034\013\036\014\041\015\044\026" +
    "\047\031\032\032\037\033\043\050\050\075\035\001\002" +
    "\000\026\005\034\013\036\014\041\015\044\026\047\031" +
    "\032\032\037\033\043\050\050\075\035\001\002\000\026" +
    "\005\034\013\036\014\041\015\044\026\047\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\026\005\034" +
    "\013\036\014\041\015\044\026\047\031\032\032\037\033" +
    "\043\050\050\075\035\001\002\000\026\005\034\013\036" +
    "\014\041\015\044\026\047\031\032\032\037\033\043\050" +
    "\050\075\035\001\002\000\026\005\034\013\036\014\041" +
    "\015\044\026\047\031\032\032\037\033\043\050\050\075" +
    "\035\001\002\000\026\005\034\013\036\014\041\015\044" +
    "\026\047\031\032\032\037\033\043\050\050\075\035\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\056\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79" +
    "\023\uff79\025\uff79\027\uff79\034\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\073\uff79\076\uff79\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\026\005\034\013\036\014" +
    "\041\015\044\026\047\031\032\032\037\033\043\050\050" +
    "\075\035\001\002\000\026\005\034\013\036\014\041\015" +
    "\044\026\047\031\032\032\037\033\043\050\050\075\035" +
    "\001\002\000\056\004\062\005\054\006\071\007\056\010" +
    "\060\011\066\023\uff80\025\uff80\027\uff80\034\uff80\036\065" +
    "\037\057\040\uff80\041\uff80\042\063\043\053\044\055\045" +
    "\064\046\061\047\072\073\uff80\076\uff80\001\002\000\056" +
    "\004\062\005\054\006\071\007\056\010\060\011\066\023" +
    "\uff7e\025\uff7e\027\uff7e\034\uff7e\036\065\037\057\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\073\uff7e\076\uff7e\001\002\000\056\004\uff8a\005\uff8a" +
    "\006\uff8a\007\uff8a\010\uff8a\011\uff8a\023\uff8a\025\uff8a\027" +
    "\uff8a\034\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\073\uff8a\076" +
    "\uff8a\001\002\000\056\004\062\005\054\006\071\007\056" +
    "\010\060\011\066\023\uff81\025\uff81\027\uff81\034\uff81\036" +
    "\065\037\057\040\uff81\041\uff81\042\063\043\053\044\055" +
    "\045\064\046\061\047\072\073\uff81\076\uff81\001\002\000" +
    "\056\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\023\uff86\025\uff86\027\uff86\034\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\073\uff86\076\uff86\001\002\000\056\004\062\005" +
    "\054\006\071\007\056\010\060\011\066\023\uff85\025\uff85" +
    "\027\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\073\uff85" +
    "\076\uff85\001\002\000\056\004\062\005\054\006\071\007" +
    "\056\010\060\011\066\023\uff7c\025\uff7c\027\uff7c\034\uff7c" +
    "\036\065\037\057\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\047\uff7c\073\uff7c\076\uff7c\001\002" +
    "\000\056\004\062\005\054\006\071\007\056\010\060\011" +
    "\066\023\uff83\025\uff83\027\uff83\034\uff83\036\065\037\057" +
    "\040\uff83\041\uff83\042\063\043\053\044\055\045\064\046" +
    "\061\047\072\073\uff83\076\uff83\001\002\000\056\004\uff8b" +
    "\005\uff8b\006\071\007\056\010\060\011\066\023\uff8b\025" +
    "\uff8b\027\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\073" +
    "\uff8b\076\uff8b\001\002\000\056\004\062\005\054\006\071" +
    "\007\056\010\060\011\066\023\uff7f\025\uff7f\027\uff7f\034" +
    "\uff7f\036\065\037\057\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\073\uff7f\076\uff7f\001" +
    "\002\000\056\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\023\uff87\025\uff87\027\uff87\034\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\073\uff87\076\uff87\001\002\000\056\004" +
    "\062\005\054\006\071\007\056\010\060\011\066\023\uff84" +
    "\025\uff84\027\uff84\034\uff84\036\uff84\037\uff84\040\uff84\041" +
    "\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84" +
    "\073\uff84\076\uff84\001\002\000\056\004\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\023\uff88\025\uff88\027\uff88" +
    "\034\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\073\uff88\076\uff88" +
    "\001\002\000\056\004\062\005\054\006\071\007\056\010" +
    "\060\011\066\023\uff7d\025\uff7d\027\uff7d\034\uff7d\036\065" +
    "\037\057\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\073\uff7d\076\uff7d\001\002\000\056" +
    "\004\uff89\005\uff89\006\071\007\056\010\060\011\066\023" +
    "\uff89\025\uff89\027\uff89\034\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\073\uff89\076\uff89\001\002\000\056\004\062\005\054" +
    "\006\071\007\056\010\060\011\066\023\uff82\025\uff82\027" +
    "\uff82\034\uff82\036\065\037\057\040\uff82\041\uff82\042\063" +
    "\043\053\044\055\045\064\046\061\047\072\073\uff82\076" +
    "\uff82\001\002\000\012\015\uffda\025\uffda\027\uffda\075\uffda" +
    "\001\002\000\004\015\131\001\002\000\034\005\034\013" +
    "\036\014\041\015\044\025\uffb1\026\047\027\uffb1\030\124" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\026\005\034\013\036\014\041\015\044\026\047\031\032" +
    "\032\037\033\043\050\050\075\035\001\002\000\044\004" +
    "\062\005\054\006\071\007\056\010\060\011\066\036\065" +
    "\037\057\040\067\041\073\042\063\043\053\044\055\045" +
    "\064\046\061\047\072\076\121\001\002\000\072\004\uff70" +
    "\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\023\uff70\024" +
    "\uff70\025\uff70\027\uff70\034\uff70\036\uff70\037\uff70\040\uff70" +
    "\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047" +
    "\uff70\063\uff70\064\uff70\065\uff70\066\uff70\073\uff70\075\uff70" +
    "\076\uff70\001\002\000\046\004\062\005\054\006\071\007" +
    "\056\010\060\011\066\025\uffb3\027\uffb3\036\065\037\057" +
    "\040\067\041\073\042\063\043\053\044\055\045\064\046" +
    "\061\047\072\001\002\000\006\025\125\027\126\001\002" +
    "\000\006\025\uffb2\027\uffb2\001\002\000\030\005\034\013" +
    "\036\014\041\015\044\026\047\030\127\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\056\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\023\uffb6\025\uffb6" +
    "\027\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\073\uffb6" +
    "\076\uffb6\001\002\000\006\025\uffb4\027\uffb4\001\002\000" +
    "\046\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\025\uffb5\027\uffb5\036\065\037\057\040\067\041\073\042" +
    "\063\043\053\044\055\045\064\046\061\047\072\001\002" +
    "\000\072\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\027\uff6e\034\uff6e\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045" +
    "\uff6e\046\uff6e\047\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e" +
    "\073\uff6e\076\uff6e\102\uff6e\001\002\000\056\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\023\uff7b\025\uff7b" +
    "\027\uff7b\034\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\073\uff7b" +
    "\076\uff7b\001\002\000\004\015\134\001\002\000\072\004" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\023\uff6f" +
    "\024\uff6f\025\uff6f\027\uff6f\034\uff6f\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\073\uff6f\076" +
    "\uff6f\102\uff6f\001\002\000\046\004\062\005\054\006\071" +
    "\007\056\010\060\011\066\025\uff6b\036\065\037\057\040" +
    "\067\041\073\042\063\043\053\044\055\045\064\046\061" +
    "\047\072\076\uff6b\001\002\000\006\025\140\076\141\001" +
    "\002\000\006\025\uff6a\076\uff6a\001\002\000\030\005\034" +
    "\013\036\014\041\015\044\026\047\030\142\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\056\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\023\uff73\025" +
    "\uff73\027\uff73\034\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\073" +
    "\uff73\076\uff73\001\002\000\006\025\uff6c\076\uff6c\001\002" +
    "\000\046\004\062\005\054\006\071\007\056\010\060\011" +
    "\066\025\uff6d\036\065\037\057\040\067\041\073\042\063" +
    "\043\053\044\055\045\064\046\061\047\072\076\uff6d\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\076\146\001\002\000\072" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\023" +
    "\uff71\024\uff71\025\uff71\027\uff71\034\uff71\036\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046" +
    "\uff71\047\uff71\063\uff71\064\uff71\065\uff71\066\uff71\073\uff71" +
    "\075\uff71\076\uff71\001\002\000\030\005\034\013\036\014" +
    "\041\015\044\026\047\030\150\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\006\023\uffdd\025\uffdd\001" +
    "\002\000\046\004\062\005\054\006\071\007\056\010\060" +
    "\011\066\023\uffde\025\uffde\036\065\037\057\040\067\041" +
    "\073\042\063\043\053\044\055\045\064\046\061\047\072" +
    "\001\002\000\004\015\027\001\002\000\006\023\uffe1\025" +
    "\uffe1\001\002\000\024\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\026\ufff6\034\ufff6\051\ufff6\077\ufff6\001\002\000" +
    "\022\016\013\017\023\020\022\021\015\022\011\026\021" +
    "\077\014\100\157\001\002\000\006\025\207\035\210\001" +
    "\002\000\020\016\013\017\023\020\022\021\015\022\011" +
    "\026\021\077\014\001\002\000\004\035\164\001\002\000" +
    "\006\015\163\075\031\001\002\000\012\015\uffd7\025\uffd7" +
    "\027\uffd7\075\uffd7\001\002\000\006\025\uffd2\035\uffd2\001" +
    "\002\000\012\015\uffd4\025\uffd4\027\uffd4\075\uffd4\001\002" +
    "\000\006\015\166\075\031\001\002\000\004\034\167\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\030\005\034\013\036\014\041\015\044\026\047\031\032" +
    "\032\037\033\043\035\202\050\050\075\035\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\073\172\001\002\000\004" +
    "\034\173\001\002\000\020\016\013\017\023\020\022\021" +
    "\015\022\011\026\021\077\014\001\002\000\006\025\175" +
    "\035\176\001\002\000\020\016\013\017\023\020\022\021" +
    "\015\022\011\026\021\077\014\001\002\000\030\005\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\026\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\035\uffcf\050\uffcf\075\uffcf\001\002\000\006\015\200" +
    "\075\031\001\002\000\006\025\uffd3\035\uffd3\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\073\203\001\002\000\004" +
    "\035\uffd1\001\002\000\004\034\204\001\002\000\020\016" +
    "\013\017\023\020\022\021\015\022\011\026\021\077\014" +
    "\001\002\000\006\025\175\035\206\001\002\000\030\005" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\026\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\035\uffd0\050\uffd0\075\uffd0\001\002\000\022\016" +
    "\013\017\023\020\022\021\015\022\011\026\021\077\014" +
    "\100\157\001\002\000\012\015\uffd5\025\uffd5\027\uffd5\075" +
    "\uffd5\001\002\000\004\035\212\001\002\000\012\015\uffd6" +
    "\025\uffd6\027\uffd6\075\uffd6\001\002\000\022\016\013\017" +
    "\023\020\022\021\015\022\011\026\021\052\225\077\014" +
    "\001\002\000\022\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\026\ufff5\051\ufff5\077\ufff5\001\002\000\022\016\013" +
    "\017\023\020\022\021\015\022\011\026\021\051\000\077" +
    "\014\001\002\000\004\051\ufff2\001\002\000\004\051\220" +
    "\001\002\000\024\016\013\017\023\020\022\021\015\022" +
    "\011\026\021\052\225\054\u0125\077\014\001\002\000\006" +
    "\035\ufff2\051\ufff2\001\002\000\006\035\223\051\224\001" +
    "\002\000\004\002\uffff\001\002\000\022\016\013\017\023" +
    "\020\022\021\015\022\011\026\021\052\225\077\014\001" +
    "\002\000\004\015\ufff0\001\002\000\004\015\230\001\002" +
    "\000\006\015\ufff1\075\031\001\002\000\004\026\ufff4\001" +
    "\002\000\004\026\232\001\002\000\024\016\013\017\023" +
    "\020\022\021\015\022\011\026\021\027\uffee\053\236\077" +
    "\014\001\002\000\004\027\250\001\002\000\006\025\242" +
    "\027\uffef\001\002\000\006\015\241\075\031\001\002\000" +
    "\020\016\013\017\023\020\022\021\015\022\011\026\021" +
    "\077\014\001\002\000\006\015\240\075\031\001\002\000" +
    "\006\025\uffea\027\uffea\001\002\000\006\025\uffeb\027\uffeb" +
    "\001\002\000\022\016\013\017\023\020\022\021\015\022" +
    "\011\026\021\053\244\077\014\001\002\000\006\015\247" +
    "\075\031\001\002\000\020\016\013\017\023\020\022\021" +
    "\015\022\011\026\021\077\014\001\002\000\006\015\246" +
    "\075\031\001\002\000\006\025\uffec\027\uffec\001\002\000" +
    "\006\025\uffed\027\uffed\001\002\000\004\034\252\001\002" +
    "\000\006\035\ufff3\051\ufff3\001\002\000\042\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\026\uffe5\055\uffe5" +
    "\060\uffe5\062\uffe5\067\uffe5\071\uffe5\074\uffe5\077\uffe5\101" +
    "\uffe5\103\uffe5\001\002\000\042\015\044\016\013\017\023" +
    "\020\022\021\015\022\011\026\021\055\266\060\275\062" +
    "\261\067\274\071\273\074\270\077\014\101\265\103\302" +
    "\001\002\000\004\023\uffab\001\002\000\004\023\uffac\001" +
    "\002\000\004\023\uffad\001\002\000\004\023\uffbc\001\002" +
    "\000\004\023\uffba\001\002\000\004\026\u010c\001\002\000" +
    "\004\023\uffbb\001\002\000\004\023\uffbe\001\002\000\044" +
    "\015\044\016\013\017\023\020\022\021\015\022\011\026" +
    "\021\035\u0109\055\266\060\275\062\261\067\274\071\273" +
    "\074\270\077\014\101\265\103\302\001\002\000\020\016" +
    "\013\017\023\020\022\021\015\022\011\026\021\077\014" +
    "\001\002\000\026\005\034\013\036\014\041\015\044\026" +
    "\047\031\032\032\037\033\043\050\050\075\035\001\002" +
    "\000\004\023\uffc0\001\002\000\032\005\034\013\036\014" +
    "\041\015\044\020\375\023\uffc5\026\047\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\014\024\366\063" +
    "\365\064\364\065\363\066\367\001\002\000\004\023\362" +
    "\001\002\000\004\026\334\001\002\000\004\026\uffa6\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\004\023\uffb9\001\002\000\004\023\uffbf\001\002\000\004" +
    "\023\uffc1\001\002\000\004\023\uffbd\001\002\000\004\026" +
    "\304\001\002\000\004\023\uffc2\001\002\000\026\005\034" +
    "\013\036\014\041\015\044\026\047\031\032\032\037\033" +
    "\043\050\050\075\035\001\002\000\044\004\062\005\054" +
    "\006\071\007\056\010\060\011\066\027\306\036\065\037" +
    "\057\040\067\041\073\042\063\043\053\044\055\045\064" +
    "\046\061\047\072\001\002\000\004\023\uffb8\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\034\uffaa\036\065\037\057\040\067\041\073\042\063\043" +
    "\053\044\055\045\064\046\061\047\072\001\002\000\004" +
    "\034\312\001\002\000\004\023\uffa9\001\002\000\042\015" +
    "\044\016\013\017\023\020\022\021\015\022\011\026\021" +
    "\055\266\060\275\061\315\062\261\067\274\071\273\077" +
    "\014\101\265\103\302\001\002\000\004\023\323\001\002" +
    "\000\044\015\044\016\013\017\023\020\022\021\015\022" +
    "\011\026\021\035\321\055\266\060\275\061\315\062\261" +
    "\067\274\071\273\077\014\101\265\103\302\001\002\000" +
    "\004\023\317\001\002\000\004\023\uff96\001\002\000\004" +
    "\023\uff95\001\002\000\004\023\322\001\002\000\004\023" +
    "\uffe3\001\002\000\044\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\026\uff98\035\uff98\055\uff98\060\uff98\061" +
    "\uff98\062\uff98\067\uff98\071\uff98\077\uff98\101\uff98\103\uff98" +
    "\001\002\000\044\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\026\uff97\035\uff97\055\uff97\060\uff97\061\uff97" +
    "\062\uff97\067\uff97\071\uff97\077\uff97\101\uff97\103\uff97\001" +
    "\002\000\004\026\325\001\002\000\004\015\326\001\002" +
    "\000\004\070\327\001\002\000\004\015\330\001\002\000" +
    "\004\027\331\001\002\000\004\034\uffa5\001\002\000\004" +
    "\034\312\001\002\000\004\023\uffa4\001\002\000\026\005" +
    "\034\013\036\014\041\015\044\026\047\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\044\004\062\005" +
    "\054\006\071\007\056\010\060\011\066\027\336\036\065" +
    "\037\057\040\067\041\073\042\063\043\053\044\055\045" +
    "\064\046\061\047\072\001\002\000\004\034\337\001\002" +
    "\000\004\072\341\001\002\000\006\035\355\072\356\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\073\343\001\002\000\004" +
    "\034\344\001\002\000\040\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\026\uffe7\055\uffe7\060\uffe7\062\uffe7" +
    "\067\uffe7\071\uffe7\077\uffe7\101\uffe7\103\uffe7\001\002\000" +
    "\006\035\uffae\072\uffae\001\002\000\040\015\044\016\013" +
    "\017\023\020\022\021\015\022\011\026\021\055\266\060" +
    "\275\062\261\067\274\071\273\077\014\101\265\103\302" +
    "\001\002\000\042\015\044\016\013\017\023\020\022\021" +
    "\015\022\011\026\021\035\352\055\266\060\275\062\261" +
    "\067\274\071\273\077\014\101\265\103\302\001\002\000" +
    "\004\023\351\001\002\000\042\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\026\uffc8\035\uffc8\055\uffc8\060" +
    "\uffc8\062\uffc8\067\uffc8\071\uffc8\077\uffc8\101\uffc8\103\uffc8" +
    "\001\002\000\016\023\uffe6\035\uffe6\051\uffe6\056\uffe6\057" +
    "\uffe6\072\uffe6\001\002\000\004\023\354\001\002\000\042" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\026" +
    "\uffc9\035\uffc9\055\uffc9\060\uffc9\062\uffc9\067\uffc9\071\uffc9" +
    "\077\uffc9\101\uffc9\103\uffc9\001\002\000\004\023\uffb0\001" +
    "\002\000\026\005\034\013\036\014\041\015\044\026\047" +
    "\031\032\032\037\033\043\050\050\075\035\001\002\000" +
    "\044\004\062\005\054\006\071\007\056\010\060\011\066" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\073\360\001\002\000\004" +
    "\034\344\001\002\000\006\035\uffaf\072\uffaf\001\002\000" +
    "\044\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\026\uffc6\035\uffc6\055\uffc6\060\uffc6\062\uffc6\067\uffc6\071" +
    "\uffc6\074\uffc6\077\uffc6\101\uffc6\103\uffc6\001\002\000\026" +
    "\005\034\013\036\014\041\015\044\026\047\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\004\023\uff64" +
    "\001\002\000\004\023\uff67\001\002\000\030\005\034\013" +
    "\036\014\041\015\044\026\047\030\371\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\044\004\062\005\054\006" +
    "\071\007\056\010\060\011\066\023\uff65\036\065\037\057" +
    "\040\067\041\073\042\063\043\053\044\055\045\064\046" +
    "\061\047\072\001\002\000\004\023\uff8f\001\002\000\044" +
    "\004\062\005\054\006\071\007\056\010\060\011\066\023" +
    "\uff90\036\065\037\057\040\067\041\073\042\063\043\053" +
    "\044\055\045\064\046\061\047\072\001\002\000\044\004" +
    "\062\005\054\006\071\007\056\010\060\011\066\023\uff66" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\001\002\000\044\004\062" +
    "\005\054\006\071\007\056\010\060\011\066\023\uffc4\036" +
    "\065\037\057\040\067\041\073\042\063\043\053\044\055" +
    "\045\064\046\061\047\072\001\002\000\004\023\uffc3\001" +
    "\002\000\044\004\062\005\054\006\071\007\056\010\060" +
    "\011\066\034\344\036\065\037\057\040\067\041\073\042" +
    "\063\043\053\044\055\045\064\046\061\047\072\001\002" +
    "\000\010\023\uff91\056\u0100\057\u0101\001\002\000\026\005" +
    "\034\013\036\014\041\015\044\026\047\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\004\034\344\001" +
    "\002\000\004\023\uff94\001\002\000\004\023\uff92\001\002" +
    "\000\044\004\062\005\054\006\071\007\056\010\060\011" +
    "\066\034\344\036\065\037\057\040\067\041\073\042\063" +
    "\043\053\044\055\045\064\046\061\047\072\001\002\000" +
    "\010\023\uff91\056\u0100\057\u0101\001\002\000\004\023\uff93" +
    "\001\002\000\006\015\u0108\075\031\001\002\000\004\023" +
    "\uffb7\001\002\000\006\035\uffe4\051\uffe4\001\002\000\004" +
    "\023\u010b\001\002\000\044\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\026\uffc7\035\uffc7\055\uffc7\060\uffc7" +
    "\062\uffc7\067\uffc7\071\uffc7\074\uffc7\077\uffc7\101\uffc7\103" +
    "\uffc7\001\002\000\022\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\026\uffa8\077\uffa8\001\002\000\022\016" +
    "\013\017\023\020\022\021\015\022\011\023\uffa0\026\021" +
    "\077\014\001\002\000\004\023\u0114\001\002\000\006\015" +
    "\u0110\075\031\001\002\000\006\023\uffa3\024\u0111\001\002" +
    "\000\026\005\uffa2\013\uffa2\014\uffa2\015\uffa2\026\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\050\uffa2\075\uffa2\001\002\000\026" +
    "\005\034\013\036\014\041\015\044\026\047\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\044\004\062" +
    "\005\054\006\071\007\056\010\060\011\066\023\uffa1\036" +
    "\065\037\057\040\067\041\073\042\063\043\053\044\055" +
    "\045\064\046\061\047\072\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\044\004\062\005\054\006" +
    "\071\007\056\010\060\011\066\023\u0116\036\065\037\057" +
    "\040\067\041\073\042\063\043\053\044\055\045\064\046" +
    "\061\047\072\001\002\000\006\015\u0117\027\uff99\001\002" +
    "\000\020\024\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\075" +
    "\117\102\115\001\002\000\014\024\u011f\063\u011e\064\u011d" +
    "\065\u011c\066\u0120\001\002\000\004\027\u011a\001\002\000" +
    "\004\034\312\001\002\000\004\023\uffa7\001\002\000\026" +
    "\005\034\013\036\014\041\015\044\026\047\031\032\032" +
    "\037\033\043\050\050\075\035\001\002\000\004\027\uff9a" +
    "\001\002\000\004\027\uff9d\001\002\000\030\005\034\013" +
    "\036\014\041\015\044\026\047\030\u0122\031\032\032\037" +
    "\033\043\050\050\075\035\001\002\000\026\005\034\013" +
    "\036\014\041\015\044\026\047\031\032\032\037\033\043" +
    "\050\050\075\035\001\002\000\044\004\062\005\054\006" +
    "\071\007\056\010\060\011\066\027\uff9b\036\065\037\057" +
    "\040\067\041\073\042\063\043\053\044\055\045\064\046" +
    "\061\047\072\001\002\000\004\027\uff9e\001\002\000\044" +
    "\004\062\005\054\006\071\007\056\010\060\011\066\027" +
    "\uff9f\036\065\037\057\040\067\041\073\042\063\043\053" +
    "\044\055\045\064\046\061\047\072\001\002\000\044\004" +
    "\062\005\054\006\071\007\056\010\060\011\066\027\uff9c" +
    "\036\065\037\057\040\067\041\073\042\063\043\053\044" +
    "\055\045\064\046\061\047\072\001\002\000\004\034\uffe9" +
    "\001\002\000\004\034\344\001\002\000\006\035\uffe8\051" +
    "\uffe8\001\002\000\004\015\u0129\001\002\000\004\026\u012a" +
    "\001\002\000\024\016\013\017\023\020\022\021\015\022" +
    "\011\026\021\027\ufffb\053\u012e\077\014\001\002\000\006" +
    "\025\u0132\027\ufffc\001\002\000\004\027\u0130\001\002\000" +
    "\010\025\ufff8\027\ufff8\075\031\001\002\000\020\016\013" +
    "\017\023\020\022\021\015\022\011\026\021\077\014\001" +
    "\002\000\010\025\ufff7\027\ufff7\075\031\001\002\000\004" +
    "\023\u0131\001\002\000\006\034\ufffe\051\ufffe\001\002\000" +
    "\022\016\013\017\023\020\022\021\015\022\011\026\021" +
    "\053\u0134\077\014\001\002\000\010\025\ufffa\027\ufffa\075" +
    "\031\001\002\000\020\016\013\017\023\020\022\021\015" +
    "\022\011\026\021\077\014\001\002\000\010\025\ufff9\027" +
    "\ufff9\075\031\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\004\004\021\003\001\001\000\016\005" +
    "\016\010\017\011\015\012\007\030\011\054\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\025\014\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\044\003\041\051" +
    "\045\056\050\057\037\060\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\134\003" +
    "\041\050\135\051\045\056\050\057\037\060\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\131\003\041\051\045\056\050" +
    "\057\037\060\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\051" +
    "\003\041\051\045\056\050\057\037\060\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\112\003\041\051\045\056\050\057\037\060\032\001" +
    "\001\000\016\002\111\003\041\051\045\056\050\057\037" +
    "\060\032\001\001\000\016\002\110\003\041\051\045\056" +
    "\050\057\037\060\032\001\001\000\016\002\107\003\041" +
    "\051\045\056\050\057\037\060\032\001\001\000\016\002" +
    "\106\003\041\051\045\056\050\057\037\060\032\001\001" +
    "\000\016\002\105\003\041\051\045\056\050\057\037\060" +
    "\032\001\001\000\016\002\104\003\041\051\045\056\050" +
    "\057\037\060\032\001\001\000\016\002\103\003\041\051" +
    "\045\056\050\057\037\060\032\001\001\000\016\002\102" +
    "\003\041\051\045\056\050\057\037\060\032\001\001\000" +
    "\016\002\101\003\041\051\045\056\050\057\037\060\032" +
    "\001\001\000\016\002\100\003\041\051\045\056\050\057" +
    "\037\060\032\001\001\000\016\002\077\003\041\051\045" +
    "\056\050\057\037\060\032\001\001\000\016\002\076\003" +
    "\041\051\045\056\050\057\037\060\032\001\001\000\002" +
    "\001\001\000\016\002\075\003\041\051\045\056\050\057" +
    "\037\060\032\001\001\000\016\002\074\003\041\051\045" +
    "\056\050\057\037\060\032\001\001\000\016\002\073\003" +
    "\041\051\045\056\050\057\037\060\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\121\003\041\051\045" +
    "\052\122\056\050\057\037\060\032\001\001\000\016\002" +
    "\117\003\041\051\045\056\050\057\037\060\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\127\003\041" +
    "\051\045\056\050\057\037\060\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\142\003\041\051\045\056\050\057\037\060\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\144\003\041\051\045\056\050\057\037\060" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\150\003\041\051\045\056\050\057\037\060\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\160\011\015\012\007\054\006\055\155\062\157\065\161" +
    "\001\001\000\002\001\001\000\012\010\164\011\015\012" +
    "\007\054\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\170\003\041" +
    "\051\045\056\050\057\037\060\032\063\167\001\001\000" +
    "\016\002\200\003\041\051\045\056\050\057\037\060\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\160\011\015\012\007\054\006\055\173\001\001\000\002" +
    "\001\001\000\012\010\176\011\015\012\007\054\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\160\011\015\012\007\054\006\055\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\176\011" +
    "\015\012\007\054\006\062\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\226\011" +
    "\015\012\007\024\u0127\054\006\001\001\000\004\021\214" +
    "\001\001\000\016\005\016\010\017\011\015\012\007\054" +
    "\006\067\215\001\001\000\004\022\216\001\001\000\004" +
    "\027\220\001\001\000\014\010\226\011\015\012\007\024" +
    "\225\054\006\001\001\000\004\022\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\226\011\015\012" +
    "\007\024\225\054\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\230\001\001\000" +
    "\002\001\001\000\016\010\234\011\015\012\007\023\232" +
    "\025\233\054\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\236\011\015\012\007" +
    "\054\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\242\011\015\012\007\054\006" +
    "\001\001\000\002\001\001\000\012\010\244\011\015\012" +
    "\007\054\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\250\001\001\000\002\001" +
    "\001\000\004\073\252\001\001\000\056\005\276\006\302" +
    "\010\017\011\015\012\007\015\277\016\266\031\262\033" +
    "\300\034\255\035\254\036\253\044\256\046\263\047\271" +
    "\051\261\054\006\056\270\057\037\060\032\061\257\066" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\005\276" +
    "\006\302\010\017\011\015\012\007\015\277\016\266\031" +
    "\262\033\300\034\255\035\254\036\253\044\256\047\u0109" +
    "\051\261\054\006\056\270\057\037\060\032\061\257\066" +
    "\275\001\001\000\012\010\u0106\011\015\012\007\054\006" +
    "\001\001\000\016\002\375\003\041\051\045\056\050\057" +
    "\037\060\032\001\001\000\002\001\001\000\016\002\373" +
    "\003\041\051\045\056\050\057\037\060\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\323\001\001\000\016\002\306\003\041\051\045\056" +
    "\050\057\037\060\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\304\003\041\051\045" +
    "\056\050\057\037\060\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\307\001\001\000\004\037\310" +
    "\001\001\000\002\001\001\000\056\005\276\006\315\010" +
    "\017\011\015\012\007\015\277\016\266\031\262\033\300" +
    "\034\255\035\254\036\253\040\313\041\312\044\256\051" +
    "\261\054\006\056\270\057\037\060\032\061\257\066\275" +
    "\001\001\000\002\001\001\000\054\005\276\006\315\010" +
    "\017\011\015\012\007\015\277\016\266\031\262\033\300" +
    "\034\255\035\254\036\253\041\317\044\256\051\261\054" +
    "\006\056\270\057\037\060\032\061\257\066\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\331" +
    "\001\001\000\004\037\332\001\001\000\002\001\001\000" +
    "\016\002\334\003\041\051\045\056\050\057\037\060\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\337\001\001\000\002\001\001\000\016\002\341\003\041" +
    "\051\045\056\050\057\037\060\032\001\001\000\002\001" +
    "\001\000\004\017\344\001\001\000\004\072\345\001\001" +
    "\000\002\001\001\000\054\005\276\006\347\007\346\010" +
    "\017\011\015\012\007\015\277\016\266\031\262\033\300" +
    "\034\255\035\254\036\253\044\256\051\261\054\006\056" +
    "\270\057\037\060\032\061\257\066\275\001\001\000\052" +
    "\005\276\006\352\010\017\011\015\012\007\015\277\016" +
    "\266\031\262\033\300\034\255\035\254\036\253\044\256" +
    "\051\261\054\006\056\270\057\037\060\032\061\257\066" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\356\003\041\051\045\056\050\057\037" +
    "\060\032\001\001\000\002\001\001\000\004\017\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\372" +
    "\003\041\051\045\056\050\057\037\060\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\371\003\041" +
    "\051\045\056\050\057\037\060\032\001\001\000\016\002" +
    "\367\003\041\051\045\056\050\057\037\060\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\376\001\001\000\004\032\u0101\001\001\000\016\002" +
    "\u0103\003\041\051\045\056\050\057\037\060\032\001\001" +
    "\000\004\017\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0104\001\001\000\004\032\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u010c\001\001\000\014\010\u010e\011\015\012\007\042" +
    "\u010d\054\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\u0111\001\001\000\016\002" +
    "\u0112\003\041\051\045\056\050\057\037\060\032\001\001" +
    "\000\002\001\001\000\016\002\u0114\003\041\051\045\056" +
    "\050\057\037\060\032\001\001\000\002\001\001\000\012" +
    "\043\u0118\056\u0117\057\037\060\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u011a" +
    "\001\001\000\002\001\001\000\016\002\u0123\003\041\051" +
    "\045\056\050\057\037\060\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\u0122\003\041\051\045\056" +
    "\050\057\037\060\032\001\001\000\016\002\u0120\003\041" +
    "\051\045\056\050\057\037\060\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0125\001\001\000\004\017\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\u012c\011\015\012\007\026\u012a\053\u012b\054\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\u012e\011\015\012\007\054\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\u0132\011\015\012\007\054\006\001\001\000\002\001" +
    "\001\000\012\010\u0134\011\015\012\007\054\006\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


  public boolean syntaxErrors;
  Lexer scanner;
  SymTable tablaVar = new SymTable(null);
  ASTInstBloque bloque;
  ASTBloquePrincipal principal;
  ProcTable promesas = new ProcTable();
  ProcTable funciones = new ProcTable();
  Registros reg = new Registros();
  SymTable list_articles= new SymTable(null);
  LinkedList pila = new LinkedList();
  int SRegistros = 0;
  int MaxSRegistros = 7;
  int vg = 0;
  info inf2;
  int numParam = 0;

  public parser(Lexer lex) {
    super(lex);
    scanner = lex;
  }

  public void report_error(String message, Object info) {
    syntaxErrors = true;
    System.out.print(message);
    if (!(info instanceof Symbol)) return;
      Symbol symbol = (Symbol) info;
    if ( symbol.left < 0 || symbol.right < 0 ) return;
      System.out.println(" en la linea "+symbol.left+", columna "+symbol.right);
  }

  FileOutputStream out = open();
  
  FileOutputStream open(){
    try{
      return new FileOutputStream("out.txt");
    }
    catch(Exception e){
      e.printStackTrace();
    }
    return null;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // asignacionRara ::= lvalue MENOSMENOS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteInt(1)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isFloat()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());

                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignacionRara ::= lvalue MENOSIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  

                                  if (v1.getTip().isNumber() && v2.getTip().isNumber()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1, v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // asignacionRara ::= lvalue MASIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (v1.getTip().isNumber() && v2.getTip().isNumber()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1, v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isString() && v2.getTip().isString()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprStringBin(new ASTExprId(v1.getId(),v1.getInfo()),(ASTExprString) v2));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // asignacionRara ::= lvalue MASMAS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteInt(1)));
                                    parser.bloque.add(RESULT); 
                                  }
                                  else if (v1.getTip().isFloat()){
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                    parser.bloque.add(RESULT);
                                  }
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(), parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionRara",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // opruna ::= NEGACION 
            {
              String RESULT =null;
		RESULT = "NEGACION" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opruna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // opruna ::= MINUS 
            {
              String RESULT =null;
		RESULT = "MINUS" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opruna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // iniarray ::= TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(new ASTExprCharCtte(v1.toCharArray()[0])); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // iniarray ::= expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(v1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // iniarray ::= iniarray COMA TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                          RESULT = v1; 
                                            if (((ASTExpr) v1.getFirst()).getTip().isChar())
                                              throw new DifTiposArrayException(parser.scanner.linea(),parser.scanner.columna());
                                          RESULT.add(new ASTExprCharCtte(v2.toCharArray()[0])); 
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // iniarray ::= iniarray COMA expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = v1;
                                            if (!((ASTExpr) v1.getFirst()).getTip().equals(v2.getTip()))
                                              throw new DifTiposArrayException(parser.scanner.linea(),parser.scanner.columna());
                                            else   
                                              RESULT.add(v2); 
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniarray",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // atributo_struct ::= ID PUNTO ID 
            {
              ASTExprStructElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  //Chequeamos que este declarada
                  if (parser.tablaVar.exist(v1)){
                  info inf = parser.tablaVar.find(v1);
                  ASTExprLValue lvalue = new ASTExprId(v1, inf);
                  ASTTipo tipo = inf.obj;
                  
                  //Chequeamos que sea estructurada
                  if (tipo.isStruct())
                    //Chequeamos que el atributo exista
                    if (((ASTTipoStruct) tipo).exists(v2))
                      RESULT = new ASTExprStructElem(lvalue, v2, ((ASTTipoStruct)tipo).find(v2).obj,((ASTTipoStruct)tipo).find(v2) );
                    else
                      throw new NoExisteAtributoException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                  else
                    throw new NoEsEstructuraException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                }
                else
                  throw new VariableNoDeclaradaException(v1, parser.scanner.linea(),parser.scanner.columna());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // atributo_struct ::= atributo_struct PUNTO ID 
            {
              ASTExprStructElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprStructElem v1 = (ASTExprStructElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    //Chequeamos que sea una estructura
                    if (!v1.tipo.isStruct())
                      throw new NoEsEstructuraException(v1.toString(),parser.scanner.linea(),parser.scanner.columna()); 
                      
                    //Chequeamos que exista el atributo
                    if (((ASTTipoStruct) v1.tipo).exists(v2))
                      RESULT = new ASTExprStructElem(v1,v2,((ASTTipoStruct) v1.tipo).find(v2).obj,((ASTTipoStruct) v1.tipo).find(v2) );
                      else
                        throw new NoExisteAtributoException(v2,parser.scanner.linea(),parser.scanner.columna()); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributo_struct",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // elem_array ::= ID LCORCHETE expr RCORCHETE 
            {
              ASTExprArrayElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                      if (!parser.tablaVar.exist(v1))
                                        throw new VariableNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna());
                                      else {
                                        ASTTipo tipo = parser.tablaVar.find(v1).obj;
                                        if (!tipo.isArray())
                                          throw new VariableNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna());
                                        
                                        if (!v2.getTip().isNumber())
                                          throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                        
                                        RESULT = new ASTExprArrayElem( new ASTExprId(v1, parser.tablaVar.find(v1)), ((ASTTipoArray) tipo).subclass, v2);
                                      }
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem_array",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // elem_array ::= elem_array LCORCHETE expr RCORCHETE 
            {
              ASTExprArrayElem RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTExprArrayElem v1 = (ASTExprArrayElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        if (!v2.getTip().isNumber())
                                          throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                        if (!v1.lvalue.getTip().isArray())
                                          throw new Exception("Ya no es un arreglo!");
                                        RESULT = new ASTExprArrayElem(v1,((ASTTipoArray) v1.getTip()).subclass, v2);
                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem_array",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= lvalue 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1 ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= LCORCHETE iniarray RCORCHETE 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                        ASTExprArrayCtte c = new ASTExprArrayCtte(v1);
                                        RESULT = c; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= FALSE 
            {
              ASTExpr RESULT =null;
		 RESULT = new ASTExprBoolCtte(false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= TRUE 
            {
              ASTExpr RESULT =null;
		RESULT = new ASTExprBoolCtte(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= TKSTRING 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprStringCtte(v1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= TKFLOAT 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ASTExprAritCtteFloat( Float.valueOf(v1).floatValue()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= TKENTERO 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ASTExprAritCtteInt( Integer.parseInt((String) v1));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= LPAREN expr RPAREN 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= llamadafuncion 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (ASTExpr) v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= opruna expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (v1.equals("MINUS")){
                                  if (!v2.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  RESULT = new ASTExprAritUna("-", v2) ;
                                }
                                else if (v1.equals("NEGACION")){
                                  if (!v2.getTip().isBool())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  RESULT = new ASTExprBoolUna(v2); 
                                }
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr ::= expr O expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("O", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= expr OO expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("OO", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= expr I expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("I", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= expr II expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool() || !v3.getTip().isBool())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinBool("II", v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr ::= expr DIFERENTE expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().equals(v3.getTip()))
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                if (v1.getTip().isNumber())
                                  RESULT = new ASTExprBoolBinExpr("DIFERENTE",  v1, v3);
                                else if (v1.getTip().isBool())
                                  RESULT = new ASTExprBoolBinBool("DIFERENTE",v1,v3);
                                else if (v1.getTip().isChar())
                                  RESULT = new ASTExprBoolUna(new ASTExprBoolBinChar(v1,v3));
                                else if (v1.getTip().isString())
                                  RESULT = new ASTExprBoolUna(new ASTExprBoolBinString(v1,v3));
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= expr IGUALIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!(v1.getTip().equals(v3.getTip())))
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                if (v1.getTip().isNumber())
                                  RESULT = new ASTExprBoolBinExpr("IGUALIGUAL",  v1, v3);
                                else if (v1.getTip().isBool())
                                  RESULT = new ASTExprBoolBinBool("IGUALIGUAL",v1,v3);
                                else if (v1.getTip().isChar())
                                  RESULT = new ASTExprBoolBinChar(v1,v3);
                                else if (v1.getTip().isString())
                                  RESULT = new ASTExprBoolBinString(v1,v3);
                                else if (v1.getTip().isStruct())
                                  RESULT = new ASTExprBoolBinExpr("IGUALIGUAL", v1,v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= expr MENORIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinExpr("MENORIGUAL",  v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= expr MAYORIGUAL expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprBoolBinExpr("MAYORIGUAL",  v1, v3);
                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= expr MENOR expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprBoolBinExpr("MENOR", v1, v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= expr MAYOR expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprBoolBinExpr("MAYOR",v1,v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= expr DIV expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("div",v1,v3); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= expr MOD expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("%",v1,v3) ;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= expr DIVIDE expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber()) 
                                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("/",v1,v3); 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= expr MINUS expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isNumber() || !v3.getTip().isNumber()) 
                                throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              RESULT = new ASTExprAritBin("-",v1,v3);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= expr TIMES expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!v1.getTip().isNumber() || !v3.getTip().isNumber())
                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                RESULT = new ASTExprAritBin("*",  v1,v3) ;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= expr PLUS expr 
            {
              ASTExpr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!((v1.getTip().isNumber() && v3.getTip().isNumber()) || (v1.getTip().isString() && v3.getTip().isString()))) 
                                 throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                               if (v1.getTip().isNumber()) 
                                  RESULT = new ASTExprAritBin("+", v1, v3);
                               else if (v1.getTip().isString())
                                  RESULT = new ASTExprStringBin((ASTExprString) v1,(ASTExprString) v3);

                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lvalue ::= atributo_struct 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprStructElem v1 = (ASTExprStructElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lvalue ::= elem_array 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExprArrayElem v1 = (ASTExprArrayElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lvalue ::= ID 
            {
              ASTExprLValue RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  if (!parser.tablaVar.exist(v1))
    throw new VariableNoDeclaradaException(v1,parser.scanner.linea(), parser.scanner.columna());
  else 
    RESULT = new ASTExprId(v1, parser.tablaVar.find(v1));
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= lvalue IGUAL TKCHAR 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              ASTInstAsig a = new ASTInstAsigExp(v1,new ASTExprCharCtte(v2.toCharArray()[0]));
                              if (a.checkAsig(v1.getTip())){
                                RESULT = a;
                                parser.bloque.add(RESULT);  
                              }
                              else
                              throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= lvalue IGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      ASTInstAsig a = new ASTInstAsigExp(v1,v2);
                                      a.asigna(v1.getTip());
                                      if (a.checkAsig(v1.getTip())){
                                        RESULT = a;
                                        parser.bloque.add(RESULT);  
                                      }
                                      else 
                                        throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // elseif ::= 
            {
              LinkedList RESULT =null;
		RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // elseif ::= ELSE bloque 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); RESULT.add(new ASTInstElse(parser.bloque)); parser.bloque = parser.bloque.padre; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // elseif ::= ELSEIF expr bloque elseif 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool())
                                                  throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                                  v3.addFirst(new ASTInstElseIf(v1,parser.bloque)); 
                                                  RESULT = v3; 
                                                  parser.bloque = parser.bloque.padre; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // seleccion ::= IF expr bloque elseif 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (!v1.getTip().isBool())
      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
    parser.bloque.padre.add(new ASTInstIf(parser.bloque,v1,v3));
    parser.bloque = parser.bloque.padre;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtsRS ::= BREAK PYC 
            {
              Object RESULT =null;
		 parser.bloque.add(new ASTInstBreak()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsRS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtsRS ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsRS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtsR ::= stmtsRS PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtsR ::= stmtsR stmtsRS PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsR",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asig ::= 
            {
              ASTInstAsig RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asig ::= lvalue MENOSMENOS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteInt(1)));
                                  else if (v1.getTip().isFloat())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());

                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asig ::= lvalue MENOSIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  

                                  if (v1.getTip().isNumber() && v2.getTip().isNumber())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("-",v1, v2));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asig ::= lvalue MASIGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (v1.getTip().isNumber() && v2.getTip().isNumber())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1, v2));
                                  else if (v1.getTip().isString() && v2.getTip().isString())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprStringBin(new ASTExprId(v1.getId(),v1.getInfo()),(ASTExprString) v2));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asig ::= lvalue MASMAS 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  if (v1.getTip().isEntero())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteInt(1)));
                                  else if (v1.getTip().isFloat())
                                    RESULT = new ASTInstAsigExp(v1, new ASTExprAritBin("+",v1,new ASTExprAritCtteFloat((float) 1.0)));
                                  else
                                    throw new TiposIncompatiblesException(v1.toString(), parser.scanner.linea(),parser.scanner.columna());
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asig ::= lvalue IGUAL TKCHAR 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              if (v1.getTip().isChar())
                                RESULT = new ASTInstAsigExp(v1,new ASTExprCharCtte(v2.toCharArray()[0])); 
                                else
                                  throw new TiposIncompatiblesException(v1.toString(),parser.scanner.linea(),parser.scanner.columna());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asig ::= lvalue IGUAL expr 
            {
              ASTInstAsig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExprLValue v1 = (ASTExprLValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    ASTInstAsig ret = new ASTInstAsigExp(v1, v2);
                                    if (!ret.checkAsig(v1.getTip()))
                                      throw new TiposIncompatiblesException(v2.toString(), parser.scanner.linea(),parser.scanner.columna());
                                    RESULT = ret;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec ::= 
            {
              LinkedList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec ::= tipo ID IGUAL NT$9 expr 
            {
              LinkedList RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (LinkedList) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v3 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new LinkedList(); 
                        RESULT.add(v1);
                        ASTInstAsig ret = new ASTInstAsigExp(new ASTExprId(v2, parser.tablaVar.find(v2)), v3);
                        if (!ret.checkAsig(v1))
                          throw new TiposIncompatiblesException(v2, parser.scanner.linea(),parser.scanner.columna());
                        RESULT.add(new declaracion(v2,ret,true));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$9 ::= 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        parser.tablaVar.put(v2,new info(v1));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dec ::= tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        parser.tablaVar.put(v2,new info(v1)); 
                        RESULT = new LinkedList() ; 
                        RESULT.add(v1); 
                        RESULT.add(new declaracion(v2,null,false)); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rep3 ::= FOREACH NT$7 LPAREN ID IN ID RPAREN NT$8 bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    parser.bloque.padre.add(new ASTInstForeach( parser.inf2,parser.tablaVar.find(v2),parser.bloque));
                    parser.bloque = parser.bloque.padre;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
                    if (!parser.tablaVar.exist(v2))
                      throw new VariableNoDeclaradaException(v1,parser.scanner.linea(), parser.scanner.columna());
                    info infarray = parser.tablaVar.find(v2);
                    ASTTipo tipo = infarray.obj;
                    if (!tipo.isArray())
                      throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                    
                    // Agrego el elemento creado
                    info inf =new info(((ASTTipoArray) tipo).subclass);
                    parser.inf2 = inf;
                    parser.tablaVar.put(v1, inf);
                    parser.bloque = new ASTInstBloque(parser.bloque); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              Object RESULT =null;

                   parser.tablaVar = new SymTable(parser.tablaVar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // rep2 ::= FOR LPAREN NT$6 dec PYC expr PYC asig RPAREN bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTInstAsig v3 = (ASTInstAsig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if (!v2.getTip().isBool())
                                    throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                  if (v1 != null)
                                    parser.bloque.padre.add(new ASTInstFor(((declaracion) v1.get(1)).getArbol(),v2,v3,parser.bloque));
                                  else
                                    parser.bloque.padre.add(new ASTInstFor(null,v2,v3,parser.bloque));
                                  parser.bloque = parser.bloque.padre;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$6 ::= 
            {
              Object RESULT =null;

                      parser.tablaVar = new SymTable(parser.tablaVar); 
                      parser.bloque = new ASTInstBloque(parser.bloque); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // rep1 ::= WHILE expr NT$5 bloqueR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if (!v1.getTip().isBool())
                                throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                              parser.bloque.padre.add(new ASTInstWhile(v1,parser.bloque));
                              parser.bloque = parser.bloque.padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$5 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                          parser.tablaVar = new SymTable(parser.tablaVar);
                          parser.bloque = new ASTInstBloque(parser.bloque); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // repeticion ::= rep3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // repeticion ::= rep2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // repeticion ::= rep1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // case ::= CASE expr DOSPUNTOS bloque 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LinkedList();
                                  if (v1 == null)
                                    System.out.println("En el case, la expr es nula");
                                  if (v1.Id())
                                    throw new NoIdException(parser.scanner.linea(), parser.scanner.columna());
                                  RESULT.add(v1);
                                  RESULT.add(parser.bloque);
                                  parser.bloque = parser.bloque.padre;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case ::= case CASE expr DOSPUNTOS bloque 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = v1; 
                                                  if (v1 == null)
                                                    System.out.println("En el case, la expr es nula");
                                                  if (v2.Id())
                                                    throw new NoIdException(parser.scanner.linea(),parser.scanner.columna());
                                                  RESULT.add(v2);
                                                  RESULT.add(parser.bloque);
                                                  parser.bloque = parser.bloque.padre;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switche ::= SWITCH LPAREN expr RPAREN LLLAVE case RLLAVE 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  LinkedList casos = new LinkedList(); 
                                                                  LinkedList bloques = new LinkedList();
                                                                  for (int i = 0; i < v2.size(); i++){
                                                                    if (i%2 == 0){
                                                                      ASTExpr caseexp = (ASTExpr)v2.get(i);
                                                                      if (!caseexp.getTip().isCompatible(v1.getTip()) )
                                                                        throw new UsoIndebidoException(parser.scanner.linea(),parser.scanner.columna());
                                                                      
                                                                      //Casteo Implicito
                                                                      if (v1.getTip().isFloat() && caseexp.getTip().isEntero())
                                                                        caseexp = new ASTExprCast(caseexp, new ASTTipoFloat());

                                                                      casos.add(caseexp);
                                                                    } else
                                                                      bloques.add(v2.get(i));
                                                                  }  
                                                                  parser.bloque.add(new ASTInstSwitch(v1,casos,bloques));
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switche",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parame ::= 
            {
              LinkedList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parame ::= TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList(); RESULT.add(v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parame ::= expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parame ::= parame COMA TKCHAR 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1; RESULT.add(v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parame ::= parame COMA expr 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; RESULT.add(v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parame",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadafuncion ::= ID LPAREN parame RPAREN 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (!parser.promesas.isHere(v1))
                                                    throw new FuncionNoDeclaradaException(v1,parser.scanner.linea(),parser.scanner.columna()); 
                                                  String ret = parser.funciones.getRet(v1).toString(); 
                                                  Proc procInfo = parser.funciones.get(v1);                                                 
                                                  ASTInstFuncion f1 = new ASTInstFuncion(v2, procInfo);
                                                  if (procInfo.retType.isVoid()){
                                                    RESULT = f1;
                                                  } else
                                                    RESULT = new ASTExprFun(procInfo.retType, f1); 
                                                    System.out.println(procInfo.retType);
                                                     
                                                  //Por que si es void no se agrega la llamada a función?
                                                  //if (!ret.equals("VOID"))
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // deftipo ::= TYPEDEF tipo ID 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    if (parser.tablaVar.exist(v2))
                                      throw new YaExisteException(v2,parser.scanner.linea(),parser.scanner.columna());
                                    else {
                                      parser.tablaVar.put(v2,new info(new ASTTipoTipo(v1)));
                                    }
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipo",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // imprime ::= PRINT LPAREN expr RPAREN 
            {
              ASTInst RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                parser.bloque.add(new ASTInstImprime(v1)); 
                                              
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprime",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmt ::= imprime 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmt ::= deftipo 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt ::= llamadafuncion 
            {
              ASTInst RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    parser.bloque.add((ASTInst) v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt ::= switche 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt ::= repeticion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmt ::= seleccion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= declaracion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= asignacionRara 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= asignacion 
            {
              ASTInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtb ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtb ::= RETURN CHAR 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ASTInstReturn ir = new ASTInstReturn(new ASTExprCharCtte(v1.toCharArray()[0]));
                    parser.bloque.add(ir); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtb ::= RETURN expr 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    ASTInstReturn ir = new ASTInstReturn(v1);
                    ir.retParam = parser.tablaVar.retParam();
                    System.out.println(parser.tablaVar.tamParam());
                    parser.bloque.add(ir); 
                    //RESULT = ir;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtb ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtb",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtsb ::= stmtb PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsb",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtsb ::= stmtsb stmtb PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtsb",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmts ::= stmt PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTInst v1 = (ASTInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList() ;
                                  if (v1 != null){
                                    RESULT.add(v1);
                                  }  
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmts ::= stmts stmt PYC 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTInst v2 = (ASTInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v1 ; if (v2 != null) { RESULT.add(v2);}   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipobasicos ::= CHAR 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoChar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipobasicos ::= BOOL 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipobasicos ::= FLOAT 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipobasicos ::= STRING 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipobasicos ::= ENTERO 
            {
              ASTTipo RESULT =null;
		 RESULT = new ASTTipoInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipobasicos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_union ::= expr DOSPUNTOS LLLAVE lista_estructura RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v1 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v2 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new structUnion(v1, v2.st, v2.tam); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_union",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_union ::= lista_union expr DOSPUNTOS LLLAVE lista_estructura RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		structUnion v1 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v3 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (!v1.agregar(v2, v3.st))
        throw new Exception("Se repiten los id");
      RESULT = v1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_union",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // union ::= UNION tipo ID LLLAVE lista_union RLLAVE 
            {
              structUnion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v3 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              //Actualizando el discriminante 
              v3.discriminante = v2;   
               
             //Chequeo que no hayan usado el discrimante dentro de ningun case.
             if(v3.existAll(v2))
               throw new MismoNombreStructException(parser.scanner.linea(), parser.scanner.columna());
             //Chequeo de que las expresiones en el case son iguales al discriminante
             if (!v1.equals(v3.tipo))
               throw new SwitchException(parser.scanner.linea(), parser.scanner.columna());
             
             RESULT = v3; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("union",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_estructura ::= tipo ID 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                  RESULT = new ASTTipoStruct(new info(v1),v2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_estructura ::= lista_estructura COMA tipo ID 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v1; 
                      if (!v1.st.containsKey(v3)){
                        v1.agregar(new info(v2),v3);
                      }else
                        throw new MismoNombreStructException(parser.scanner.linea(), parser.scanner.columna());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estructura",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // st ::= union RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v1 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ASTTipoStruct(v1);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // st ::= lista_estructura RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = v1;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // st ::= lista_estructura COMA union RLLAVE 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		structUnion v2 = (structUnion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    RESULT = v1;
                    v1.union = v2;
                    if (!v1.checkAll()) 
                      throw new UnionException(parser.scanner.linea(), parser.scanner.columna());
                    //Se agrega el campo discriminante
                    v1.agregar(new info(v2.tipo), v2.discriminante);
                    v1.setCamposUnion();

                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_identifier ::= STRUCT LLLAVE st 
            {
              ASTTipoStruct RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_identifier",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipocompuesto ::= LPAREN ID RPAREN 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

               if (!parser.tablaVar.exist(v1))
                 throw new TipoNoDeclaradoException(v1,parser.scanner.linea(),parser.scanner.columna());
               else {
                 ASTTipo tipo = parser.tablaVar.find(v1).obj;
                 if (!tipo.isTipo())
                   throw new TipoNoDeclaradoException(v1,parser.scanner.linea(),parser.scanner.columna());
                 
                 RESULT = ((ASTTipoTipo) tipo).getRealTipo();
               }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipocompuesto ::= struct_identifier 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipoStruct v1 = (ASTTipoStruct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipocompuesto ::= tipo LCORCHETE expr RCORCHETE 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if (!v2.getTip().isNumber())
                  throw new UsoIndebidoException(parser.scanner.linea(), parser.scanner.columna());
                RESULT = new ASTTipoArray(v1,(ASTExprArit) v2);                                
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipocompuesto",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= tipocompuesto 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo ::= tipobasicos 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multdeclar1 ::= ID IGUAL TKCHAR 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion(v1,new ASTInstAsigExp(new ASTExprId(v1, null),new ASTExprCharCtte(v2.toCharArray()[0])),true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multdeclar1 ::= ID IGUAL expr 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTExpr v2 = (ASTExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new declaracion(v1, new ASTInstAsigExp(new ASTExprId(v1, null),v2), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multdeclar1 ::= ID 
            {
              declaracion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion(v1,null,false) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // multdeclar ::= multdeclar1 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaracion v1 = (declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList x = new LinkedList() ; x.add(v1); RESULT = x;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multdeclar ::= multdeclar COMA multdeclar1 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaracion v2 = (declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1; RESULT.add(v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdeclar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= tipo multdeclar 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList();
                              for(int i =0; i < v2.size();i++){
                                if (parser.tablaVar.isHere(((declaracion) v2.get(i)).getId()))
                                  throw new YaExisteException(((declaracion) v2.get(i)).getId(),parser.scanner.linea(),parser.scanner.columna());
                                else{
                                    info inf = new info(v1);
                                  parser.tablaVar.put(((declaracion) v2.get(i)).getId(),inf );
                                  declaracion dec = (declaracion) v2.get(i);
                                  if (dec.tieneArbol()){
                                    dec.getArbol().asigna(v1);
                                    dec.getArbol().lva(inf);
                                    if(dec.getArbol().checkAsig(v1))
                                      parser.bloque.add(dec.getArbol());
                                    else{ 
                                      throw new TiposIncompatiblesException(dec.getId(), parser.scanner.linea(), parser.scanner.columna());
                                    }
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloqueR ::= LLLAVE stmtsR RLLAVE 
            {
              Object RESULT =null;
		 parser.bloque.addTable(parser.tablaVar);
                                    parser.tablaVar = parser.tablaVar.prev ;  
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueb ::= LLLAVE NT$4 stmtsb RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.bloque.addTable(parser.tablaVar);
                                       parser.tablaVar = parser.tablaVar.prev ; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueb",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.bloque = new ASTInstBloque(parser.bloque); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque ::= LLLAVE NT$3 stmts RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.bloque.addTable(parser.tablaVar);
                                    parser.tablaVar = parser.tablaVar.prev ; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.bloque = new ASTInstBloque(parser.bloque); 
                    parser.tablaVar = new SymTable(parser.tablaVar);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // principal ::= SUB MAIN NT$2 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.principal.addMain(parser.bloque); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.tablaVar= new SymTable(parser.tablaVar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // referencia ::= REF tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.numParam = 0; 
                    if (parser.tablaVar.isHere(v2))
                      throw new YaExisteException(v2,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v2,new info(v1, parser.numParam++, "ref"));
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // referencia ::= tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    parser.numParam = 0; 
                    if (parser.tablaVar.isHere(v2))
                      throw new YaExisteException(v2,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v2,new info(v1, parser.numParam++, "valor"));
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // referencia ::= referencia COMA REF tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                    if (parser.tablaVar.isHere(v3))
                      throw new YaExisteException(v3,parser.scanner.linea(), parser.scanner.columna());
                    parser.tablaVar.put(v3,new info (v2, parser.numParam++, "ref"));

    RESULT = v1 ; 
    v1.add(v2); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // referencia ::= referencia COMA tipo ID 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (parser.tablaVar.isHere(v3))
      throw new YaExisteException(v3,parser.scanner.linea(), parser.scanner.columna());
    parser.tablaVar.put(v3,new info(v2, parser.numParam++, "valor"));
    RESULT = v1 ; 
    v1.add(v2); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= referencia 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoP ::= VOID 
            {
              ASTTipo RESULT =null;
		RESULT = new ASTTipoVoid(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoP ::= tipo 
            {
              ASTTipo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedimiento ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedimiento ::= procedimiento SUB tipoP ID NT$1 LPAREN param RPAREN bloqueb 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v4 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        Proc a = new Proc(v3,v2,v4, parser.bloque);
                                                        if (parser.promesas.equals(v3,a)){
                                                          parser.principal.add(v3,a);
                                                          parser.funciones.add(v3,a);
                                                        } else
                                                          throw new FuncionNoDeclaradaException(v3, parser.scanner.linea(), parser.scanner.columna());
                                                        parser.bloque = parser.bloque.padre;
                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.tablaVar= new SymTable(parser.tablaVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= declaraciones declaracion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // referencias ::= REF tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new LinkedList(); 
                        RESULT.add(v1); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // referencias ::= tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList(); 
                    RESULT.add(v1); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // referencias ::= referencias COMA REF tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v1 ; 
    v1.add(v2); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // referencias ::= referencias COMA tipo 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTTipo v2 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v1 ; 
    v1.add(v2); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencias",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // params ::= referencias 
            {
              LinkedList RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // promesas ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("promesas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // promesas ::= promesas SUB tipoP ID LPAREN params RPAREN PYC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ASTTipo v1 = (ASTTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v3 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.promesas.add(v2, new Proc(v2,v1,v3));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("promesas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicial ::= declaraciones promesas LLLAVE declaraciones NT$0 procedimiento principal procedimiento RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if(!parser.funciones.equals(parser.promesas))
                throw new PromesaNoDeclaradaException(parser.scanner.linea(), parser.scanner.columna());
              //System.out.println(parser.principal);
              parser.principal.toCode(0,0);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
parser.principal = new ASTBloquePrincipal(parser.tablaVar); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

